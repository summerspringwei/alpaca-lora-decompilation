[{"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char*) ;\n\nint main(int argc, char **argv)\n{\nprintf(\"Shellcode Length:  %d\\n\", sizeof(code));\n\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/userland/helloworld/extr_main.c_main", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char*) ;\n\nint main(int argc,char **argv){\nprintf(\"hello world ! \\n\");\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  close (int) ;\nint /*<<< orphan*/  dup2 (int,int) ;\nint /*<<< orphan*/  execve (char*,char**,int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fflush (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\nint /*<<< orphan*/  stderr ;\nint /*<<< orphan*/  stdin ;\nint /*<<< orphan*/ * _argv ;\nint /*<<< orphan*/ * _envp ;\nint /*<<< orphan*/  _init (int,char**) ;\nint /*<<< orphan*/  _start_main (int,char**,int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  _stderr ;\nint /*<<< orphan*/  _stdin ;\nint /*<<< orphan*/  _stdout ;\n\nvoid _start(int argc, char **argv)\n{\n_init(argc, argv);\n\n_stdin = dup2(0, 0);\n_stdout = dup2(1, 1);\n_stderr = dup2(2, 2);\n\n_argv = argv;\n_envp = NULL;\n\nfflush(stdout);\nfflush(stderr);\n\nexecve(\"/bin/sh\", argv, _envp);\nclose(0);\nclose(1);\nclose(2);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/extr_start.c__start", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nscalar_t__ __environ_allocated ;\nscalar_t__ environ ;\nint /*<<< orphan*/  exit (int) ;\nvoid* fdopen (int,char*) ;\nint main (int,char**) ;\nvoid* stderr ;\nvoid* stdin ;\nvoid* stdout ;\n\nvoid _start(int argc, char** argv) {\nstdout=fdopen(0,\"rw\");\nstdin=fdopen(1,\"rw\");\nstderr=fdopen(2,\"rw\");\nint error;\nenviron = 0;\n__environ_allocated = 0;\n\n/* Call the main function of the application */\n\nerror = main( argc, argv);\n\n/* Exit the process */\n\nexit( error );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  s_modf (double,double*,double*) ;\n\ndouble modf(double x, double *iptr)\n{\ndouble frac, intgr;\n\ns_modf(x, &intgr, &frac);\n*iptr = intgr;\nreturn frac;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/math/extr_s_modf.c_modf", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int uint32_t ;\ntypedef  int int32_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EXTRACT_WORDS (int,int,double) ;\nint /*<<< orphan*/  INSERT_WORDS (double,int,int) ;\ndouble one ;\n\ndouble modf(double x, double *iptr) {\nint32_t i0,i1,j0;\nuint32_t i;\nEXTRACT_WORDS(i0,i1,x);\nj0 = ((i0>>20)&0x7ff)-0x3ff;\t/* exponent of x */\nif(j0<20) {\t\t\t/* integer part in high x */\nif(j0<0) {\t\t\t/* |x|<1 */\nINSERT_WORDS(*iptr,i0&0x80000000,0);\t/* *iptr = +-0 */\nreturn x;\n} else {\ni = (0x000fffff)>>j0;\nif(((i0&i)|i1)==0) {\t\t/* x is integral */\n*iptr = x;\nINSERT_WORDS(x,i0&0x80000000,0);\t/* return +-0 */\nreturn x;\n} else {\nINSERT_WORDS(*iptr,i0&(~i),0);\nreturn x - *iptr;\n}\n}\n} else if (j0>51) {\t\t/* no fraction part */\n*iptr = x*one;\n/* We must handle NaNs separately.  */\nif (j0 == 0x400 && ((i0 & 0xfffff) | i1))\nreturn x*one;\nINSERT_WORDS(x,i0&0x80000000,0);\t/* return +-0 */\nreturn x;\n} else {\t\t\t/* fraction part in low x */\ni = ((uint32_t)(0xffffffff))>>(j0-20);\nif((i1&i)==0) { \t\t/* x is integral */\n*iptr = x;\nINSERT_WORDS(x,i0&0x80000000,0);\t/* return +-0 */\nreturn x;\n} else {\nINSERT_WORDS(*iptr,i0,i1&(~i));\nreturn x - *iptr;\n}\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\ndouble INFINITY ;\ndouble NAN ;\nint /*<<< orphan*/  errno ;\ndouble floor (double) ;\n\ndouble ldexp(double x, int exp)\n{\nif (x == 0.0 || x == -0.0)\nreturn x;\nif (exp == 0)\nreturn x;\nif (x < 0.0)\n{\nif (exp < 0)\n{\nif (x == -INFINITY)\nreturn x;\nreturn -ldexp(-x, -exp);\n}\nif (x == -INFINITY)\nreturn x;\nreturn -ldexp(-x, exp);\n}\nif (exp < 0)\n{\nif (x == INFINITY)\nreturn x;\nreturn ldexp(x, -exp);\n}\nif (x == INFINITY)\nreturn x;\nreturn ldexp(x, exp);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/math/extr_s_ldexp.c_ldexp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  ERANGE ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  finite (double) ;\ndouble scalbn (double,int) ;\n\ndouble ldexp( double value, int exp ) {\nif ( !finite(value) || value == 0.0 ) return value;\nvalue = scalbn(value,exp);\nif ( !finite(value) || value == 0.0 ) errno = ERANGE;\nreturn value;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  u_long ;\ntypedef  int /*<<< orphan*/  u_char ;\n\n/* Variables and functions */\nint /*<<< orphan*/  atoi (char*) ;\nint /*<<< orphan*/  strlen (char*) ;\nscalar_t__ strtol (char*,char**,int /*<<< orphan*/ ) ;\n\nint inet_aton(const char *cp, u_long *addr)\n{\nu_long val;\nchar *ep;\nint base, n;\n\nval = 0;\n\nfor (;;) {\n/*\n* Collect number up to ``.''.\n* Values are specified as for C:\n* 0x=hex, 0=octal, isdigit=decimal.\n*/\ncp++;\nval = strtol(cp, &ep, base);\nif (*ep == '.') {\nif (base == 0) {\nif (val > 255)\nreturn 0;\nval <<= 8;\nbase = 10;\n} else if (base == 10) {\nif (val > 255)\nreturn 0;\nval <<= 8;\n} else\nreturn 0;\ncp = ep + 1;\n} else\nbreak;\n}\n\n/*\n* Concoct the address according to\n* the number of values specified.\n*/\nn = 0;\nval <<= 8 * (3 - n);\nfor (;;) {\nif (*cp == '.') {\nn++;\ncp++;\nif (n > 3)\nreturn 0;\nval |= strtol(cp, &ep, base) << 8 * (3 - n);\ncp = ep;\n} else\nbreak;\n}\nif (n < 3)\nreturn 0;\n*addr = val;\nreturn 1;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/network/extr_inet_aton.c_inet_aton", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct in_addr {int /*<<< orphan*/  s_addr; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  htonl (unsigned int) ;\nlong strtoul (char*,char**,int /*<<< orphan*/ ) ;\n\nint inet_aton( const char* cp, struct in_addr* inp ) {\nint i;\nunsigned int ip = 0;\nchar* tmp= ( char* )cp;\n\nfor ( i = 24; ; ) {\nlong j;\n\nj = strtoul( tmp, &tmp, 0 );\n\nif ( *tmp == 0 ) {\nip |= j;\n\nbreak;\n} else if ( *tmp == '.' ) {\nif ( j > 255 ) {\nreturn 0;\n}\n\nip |= ( j << i );\n\nif ( i > 0 ) {\ni -= 8;\n}\n\n++tmp;\n\ncontinue;\n}\n\nreturn 0;\n}\n\ninp->s_addr = htonl( ip );\n\nreturn 1;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct in_addr {int dummy; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  sprintf (char*,char*,int,int) ;\n\nchar *inet_ntoa(struct in_addr in)\n{\nstatic char buf[18];\nsprintf(buf, \"%d.%d.%d.%d\",\n(int)((in.s_addr) & 0xff),\n(int)(((in.s_addr) >> 8) & 0xff),\n(int)(((in.s_addr) >> 16) & 0xff),\n(int)(((in.s_addr) >> 24) & 0xff));\nreturn buf;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/network/extr_inet_ntoa.c_inet_ntoa", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int uint8_t ;\nstruct in_addr {unsigned int s_addr; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  snprintf (char*,int,char*,int,int,int,int) ;\n\nchar* inet_ntoa( struct in_addr in ) {\nunsigned int ip;\nstatic char __inet_ntoa_result[18];\nint i;\nuint8_t bytes[4];\nuint8_t* addrbyte;\n\nip = in.s_addr;\n\naddrbyte = (uint8_t *)&ip;\n\nfor(i = 0; i < 4; i++) {\nbytes[i] = *addrbyte++;\n}\n\nsnprintf (__inet_ntoa_result, 18, \"%d.%d.%d.%d\", bytes[0], bytes[1], bytes[2], bytes[3]);\n\nreturn __inet_ntoa_result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  qsort_r (void*,size_t,size_t,size_t,void*,void (*) (void const*,void const*,void*),void*) ;\n\nvoid qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *, void *), void *arg)\n{\nif (nmemb < 2 || size < 2)\nreturn;\n\nqsort_r(base, nmemb - 2, size - 2, size, arg, compar, arg);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_qsort.c_qsort", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  quicksort (void*,size_t,int /*<<< orphan*/ ,size_t,int (*) (void const*,void const*)) ;\n\nvoid qsort(void* base,size_t nmemb,size_t size,int (*compar)(const void*,const void*)) {\n/* check for integer overflows */\nif (nmemb >= (((size_t)-1)>>1) ||\nsize >= (((size_t)-1)>>1)) return;\n#if 0\nif (sizeof(size_t) < sizeof(unsigned long long)) {\nif ((unsigned long long)size * nmemb > (size_t)-1) return;\n} else {\nif (size*nmemb/nmemb != size) return;\n}\n#endif\nif (nmemb>1)\nquicksort(base,size,0,nmemb-1,compar);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  scalar_t__ long long ;\ntypedef  int /*<<< orphan*/  char_u ;\n\n/* Variables and functions */\nscalar_t__ LLONG_MAX ;\nscalar_t__ LLONG_MIN ;\nscalar_t__ LONG_MAX ;\nscalar_t__ LONG_MIN ;\nscalar_t__ isdigit (int /*<<< orphan*/ ) ;\nscalar_t__ strtoll_base (scalar_t__*,char*,int,int /*<<< orphan*/ ) ;\n\nlong long\nstrtoll(char *s, char **end, int base)\n{\nchar_u\t*p;\nlong long\tl;\nint\t\tneg = 0;\n\nfor (p = (char_u *)s; *p; ++p)\nif (!isdigit(*p))\nbreak;\nif (*p == '-')\n{\nneg = 1;\n++p;\n}\nl = strtoll_base((long long)0, (char *)p, base, *p);\nif (end != NULL && *p == NUL)\n*end = (char *)p;\nif (l > LONG_MAX)\n{\nif (neg)\nl = LLONG_MIN;\nelse\nl = LLONG_MAX;\n}\nelse if (l < LONG_MIN)\n{\nif (neg)\nl = LONG_MAX;\nelse\nl = LONG_MIN;\n}\nreturn l;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_strtoll.c_strtoll", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nscalar_t__ ERANGE ;\nunsigned long long LLONG_MAX ;\nlong long LLONG_MIN ;\nscalar_t__ errno ;\nscalar_t__ isalnum (char const) ;\nscalar_t__ isspace (char const) ;\nunsigned long long strtoull (char const*,char**,int) ;\n\nlong long int strtoll( const char* nptr, char** endptr, int base ) {\nint neg = 0;\nunsigned long long int v;\nconst char* orig = nptr;\n\nwhile ( isspace( *nptr ) ) {\nnptr++;\n}\n\nif ( *nptr == '-' && isalnum( nptr[ 1 ] ) ) {\nneg = -1;\nnptr++;\n}\n\nv = strtoull( nptr, endptr, base );\n\nif ( endptr && *endptr == nptr ) {\n*endptr = ( char* )orig;\n}\n\nif ( v > LLONG_MAX ) {\nif ( v == 0x8000000000000000ull && neg ) {\nerrno = 0;\nreturn v;\n}\n\nerrno=ERANGE;\n\nreturn ( neg ? LLONG_MIN : LLONG_MAX );\n}\n\nreturn ( neg ? -v : v );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int size; scalar_t__ next; } ;\ntypedef  TYPE_1__* PMEM ;\n\n/* Variables and functions */\nscalar_t__ pmem_end ;\n\n__attribute__((used)) static void free(PMEM p)\n{\nPMEM q;\n\nwhile (p < pmem_end && p->next == 0)\n{\nq = (PMEM)((char *)p + p->size);\nif (q < pmem_end && q->next == 0)\n{\np->size += q->size;\nq = (PMEM)((char *)q + q->size);\n}\np = q;\n}\np->next = 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_malloc.c_free", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct malloc_header {int size; scalar_t__ used; } ;\n\n/* Variables and functions */\nscalar_t__ e_heap ;\n\nvoid free(void *v_addr)\n{\nstruct malloc_header *bl, *nextbl;\n\n/* Calcul du debut du bloc */\nbl = (struct malloc_header *) (v_addr - sizeof(struct malloc_header));\n\n/*\n* On merge le bloc nouvellement libere avec le bloc suivant ci celui-ci\n* est aussi libre\n*/\nwhile ((nextbl = (struct malloc_header *) ((char *) bl + bl->size))\n&& nextbl < (struct malloc_header *) e_heap\n&& nextbl->used == 0)\nbl->size += nextbl->size;\n\n/* On libere le bloc alloue */\nbl->used = 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint atoi(char *s)\n{\nint i = 0;\nint sign = 1;\n\nwhile (*s == ' ' || *s == '\\t')\ns++;\n\nif (*s == '-')\n{\nsign = -1;\ns++;\n}\nelse if (*s == '+')\ns++;\n\nwhile (*s >= '0' && *s <= '9')\n{\ni = i * 10 + (*s - '0');\ns++;\n}\n\nreturn i * sign;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_atoi.c_atoi", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint atoi( const char* s ) {\nint v = 0;\nint sign = 0;\n\nwhile ( ( *s == ' ' ) || ( ( unsigned int )( *s - 9 ) < 5u ) ) {\n++s;\n}\n\nswitch ( *s ) {\ncase '-' : sign = -1;\ncase '+' : ++s;\n}\n\nwhile ( ( unsigned int )( *s - '0' ) < 10u ) {\nv = v * 10 + *s - '0';\n++s;\n}\n\nreturn sign ? -v : v;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned long seed ;\n\nvoid srand(unsigned long seed)\n{\nthis->seed = seed;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_srand.c_srand", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned int _seed2 ;\n\nvoid srand(unsigned int seed){\n_seed2 = seed;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  free (char*) ;\nint /*<<< orphan*/  mkstemp (char*) ;\nchar* mkstemps (char*,int) ;\n\nchar *\nmktemp(char *template)\n{\nchar *ret;\n\nif ((ret = mkstemp(template)) < 0)\n{\nif ((ret = mkstemps(template, 0)) < 0)\nreturn NULL;\n}\nfree(template);\nreturn ret;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_mktemp.c_mktemp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  close (int) ;\nint mkstemp (char*) ;\nint /*<<< orphan*/  unlink (char*) ;\n\nchar* mktemp( char* template ) {\nint fd;\n\nfd = mkstemp( template );\n\nif ( fd < 0 ) {\nreturn NULL;\n}\n\nclose( fd );\n\nunlink( template );\n\nreturn template;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static inline int abs(int x)\n{\nreturn x < 0 ? -x : x;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_abs.c_abs", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint abs( int j ) {\nif ( j < 0 ) {\nreturn -j;\n} else {\nreturn j;\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nvoid* malloc (size_t) ;\n\nvoid *calloc(size_t nmemb, size_t size)\n{\nreturn malloc(nmemb * size);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_malloc.c_calloc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nvoid* malloc (size_t) ;\n\nvoid* calloc(size_t n1,size_t n2){\nreturn malloc(n1*n2);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar *getenv(char *name)\n{\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_getenv.c_getenv", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nchar** environ ;\nsize_t strlen (char const*) ;\nscalar_t__ strncmp (char*,char const*,size_t) ;\n\nchar* getenv( const char* name ) {\nreturn NULL;\n\nint i;\nsize_t length;\nsize_t name_length;\n\nname_length = strlen( name );\n\nfor ( i = 0; environ[ i ] != NULL; i++ ) {\nlength = strlen( environ[ i ] );\n\nif ( length < ( name_length + 1 ) ) {\ncontinue;\n}\n\nif ( ( strncmp( environ[ i ], name, name_length ) == 0 ) &&\n( environ[ i ][ name_length ] == '=' ) ) {\nreturn &environ[ i ][ name_length + 1 ];\n}\n}\n\nreturn NULL;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  (* bsearch_cmp_t ) (void const*,void const*) ;\n\n/* Variables and functions */\n\n__attribute__((used)) static void *\nbsearch(const void *key, const void *base, size_t nmemb, size_t size,\nbsearch_cmp_t cmp)\n{\nconst char *p, *p0, *p1;\n\nfor (p0 = (const char *) base, p1 = p0 + size * nmemb; p0 < p1; p0 += size)\n{\np = p0 + size / 2;\nif (cmp(key, (const void *) p) < 0)\np1 = p;\nelse if (cmp(key, (const void *) p) > 0)\np0 = p + size;\nelse\nreturn (void *) p;\n}\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_bsearch.c_bsearch", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint stub1 (void const*,void const*) ;\n\nvoid* bsearch( const void* key, const void* base, size_t nmemb, size_t size, int ( *compare )( const void*, const void* ) ) {\nsize_t m;\n\nwhile ( nmemb ) {\nint tmp;\nvoid* p;\n\nm = nmemb / 2;\np = ( void* )( ( ( const char* )base ) + ( m * size ) );\n\nif ( ( tmp = ( *compare )( key, p ) ) < 0 ) {\nnmemb = m;\n} else if ( tmp > 0 ) {\nbase = p + size;\nnmemb -= m + 1;\n} else {\nreturn p;\n}\n}\n\nreturn NULL;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong long atoll(char *s)\n{\nlong long n = 0;\nint sign = 1;\n\nwhile (*s == ' ' || *s == '\\t')\ns++;\n\nif (*s == '-')\n{\nsign = -1;\ns++;\n}\nelse if (*s == '+')\ns++;\n\nwhile (*s >= '0' && *s <= '9')\nn = n * 10 + *s++ - '0';\n\nreturn n * sign;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_atoll.c_atoll", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong long int atoll( const char* s ) {\nlong long int v = 0;\nint sign = 1;\n\nwhile ( *s == ' '  ||  ( unsigned int )( *s - 9 ) < 5u ) {\n++s;\n}\n\nswitch ( *s ) {\ncase '-': sign = -1;\ncase '+': ++s;\n}\n\nwhile ( ( unsigned int )( *s - '0' ) < 10u ) {\nv=  v * 10 + *s - '0';\n++s;\n}\n\nreturn sign == -1 ? -v : v;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  scalar_t__ long long ;\ntypedef  int /*<<< orphan*/  errno_t ;\n\n/* Variables and functions */\nscalar_t__ LLONG_MAX ;\nscalar_t__ LLONG_MIN ;\nscalar_t__ isdigit (char const) ;\nscalar_t__ isminus (char const) ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  errno_fail ;\nint /*<<< orphan*/  errno_ok ;\n\n__attribute__((used)) static errno_t strtol(const char *str, char **endptr, int base)\n{\nconst char *p = str;\nlong long ret = 0;\nint minus = 0;\n\nwhile (isdigit(*p))\np++;\nif (*p == '-')\n{\nminus = 1;\np++;\n}\n\nret = strtoll(p, endptr, base);\nif (endptr && *endptr == p)\n{\nerrno = errno_fail;\nreturn errno_fail;\n}\n\nif (minus)\nret = -ret;\n\nif (ret < LLONG_MIN || ret > LLONG_MAX)\n{\nerrno = errno_fail;\nreturn errno_fail;\n}\n\nif (endptr && *endptr == str)\n{\nerrno = errno_ok;\nreturn errno_ok;\n}\n\nreturn errno_ok;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_strtol.c_strtol", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned long ABS_LONG_MIN ;\nlong LONG_MAX ;\nlong LONG_MIN ;\nscalar_t__ isalnum (char const) ;\nscalar_t__ isspace (char const) ;\nunsigned long strtoul (char const*,char**,int) ;\n\nlong int strtol( const char* nptr, char** endptr, int base ) {\nint neg = 0;\nunsigned long int v;\nconst char* orig = nptr;\n\nwhile ( isspace( *nptr ) ) {\nnptr++;\n}\n\nif ( ( *nptr == '-' ) && ( isalnum( nptr[ 1 ] ) ) ) {\nneg = -1;\n++nptr;\n}\n\nv = strtoul( nptr, endptr, base );\n\nif ( ( endptr ) && ( *endptr == nptr) ) {\n*endptr = ( char* )orig;\n}\n\nif ( v >= ABS_LONG_MIN ) {\nif ( ( v == ABS_LONG_MIN ) && ( neg ) ) {\nreturn v;\n}\n\nreturn ( neg ? LONG_MIN : LONG_MAX );\n}\n\nreturn ( neg ? -v : v );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint seed ;\n\nint rand(void)\n{\nint r = seed;\nr = (r * 1103515245 + 12345) & 0x7fffffff;\nseed = r;\nreturn r;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_rand.c_rand", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned int _seed2 ;\n\nint rand( void ) {\nunsigned int next = _seed2;\nunsigned int result;\n\nnext *= 1103515245;\nnext += 12345;\nresult = ( unsigned int  ) ( next / 65536 ) % 2048;\n\nnext *= 1103515245;\nnext += 12345;\nresult <<= 10;\nresult ^= ( unsigned int ) ( next / 65536 ) % 1024;\n\nnext *= 1103515245;\nnext += 12345;\nresult <<= 10;\nresult ^= ( unsigned int ) ( next / 65536 ) % 1024;\n\n_seed2 = next;\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\ndouble strtod (char const*,int /*<<< orphan*/ *) ;\n\ndouble atof(const char *s)\n{\nreturn strtod(s, NULL);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_atof.c_atof", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\ndouble strtod (char const*,char**) ;\n\ndouble atof( const char* s ) {\nreturn strtod( s, ( char** )NULL );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  exit (int) ;\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*) ;\nint /*<<< orphan*/  stderr ;\n\nvoid abort(void)\n{\nfprintf(stderr, \"abort() called.\\n\");\nexit(-1);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_abort.c_abort", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  exit (int) ;\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*) ;\nint /*<<< orphan*/  stderr ;\n\nvoid abort( void ) {\nfprintf( stderr, \"Application aborted!\\n\" );\nexit( -1 );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint seed ;\n\nint random(void)\n{\nint r = seed;\nr = (r * 1103515245 + 12345) & 0x7fffffff;\nseed = r;\nreturn r;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_random.c_random", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned int _seed ;\n\nlong int random( void ) {\nunsigned int next = _seed;\nunsigned long int result;\n\nnext *= 1103515245;\nnext += 12345;\nresult = ( unsigned int  ) ( next / 65536 ) % 2048;\n\nnext *= 1103515245;\nnext += 12345;\nresult <<= 10;\nresult ^= ( unsigned int ) ( next / 65536 ) % 1024;\n\nnext *= 1103515245;\nnext += 12345;\nresult <<= 10;\nresult ^= ( unsigned int ) ( next / 65536 ) % 1024;\n\n_seed = next;\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  free (void*) ;\nvoid* malloc (size_t) ;\nint /*<<< orphan*/  memcpy (void*,void*,size_t) ;\n\nvoid *realloc(void *ptr, size_t size)\n{\nif (ptr == NULL)\nreturn malloc(size);\n\nvoid *new_ptr = malloc(size);\nif (new_ptr == NULL)\nreturn NULL;\n\nsize_t old_size = *(size_t *)((char *)ptr - sizeof(size_t));\nmemcpy(new_ptr, ptr, old_size);\nfree(ptr);\nreturn new_ptr;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_malloc.c_realloc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct malloc_header {unsigned long size; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  free (void*) ;\nvoid* malloc (unsigned long) ;\nint /*<<< orphan*/  memcpy (void*,void*,unsigned long) ;\n\nvoid* realloc(void* ptr,size_t nsize)\n{\nif (ptr==0){\nreturn malloc(nsize);\n}\nelse if (nsize==0)\nreturn ptr;\n\nstruct malloc_header *bl=ptr-sizeof(struct malloc_header);\nunsigned long size=bl->size;\nvoid *newptr=malloc(size+nsize);\nmemcpy(newptr,ptr,size);\nfree(ptr);\nreturn newptr;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong labs(long n)\n{\nif (n < 0)\nreturn -n;\nreturn n;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_labs.c_labs", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong labs( long j ) {\nif ( j < 0 ) {\nreturn -j;\n} else {\nreturn j;\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong atol(char *s)\n{\nlong n = 0;\nint sign = 1;\n\nwhile (*s == ' ' || *s == '\\t')\ns++;\n\nif (*s == '-')\n{\nsign = -1;\ns++;\n}\nelse if (*s == '+')\ns++;\n\nwhile (*s >= '0' && *s <= '9')\nn = n * 10 + *s++ - '0';\n\nreturn n * sign;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_atol.c_atol", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong atol( const char* s ) {\nlong v = 0;\nint sign = 0;\n\nwhile ( ( *s == ' ' ) || ( ( unsigned int )( *s - 9 ) < 5u ) ) {\n++s;\n}\n\nswitch ( *s ) {\ncase '-' : sign = -1;\ncase '+' : ++s;\n}\n\nwhile ( ( unsigned int )( *s - '0' ) < 10u ) {\nv = v * 10 + *s - '0';\n++s;\n}\n\nreturn sign ? -v : v;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned long seed ;\n\nvoid srandom(unsigned long seed)\n{\nthis->seed = seed;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_srandom.c_srandom", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nunsigned int _seed ;\n\nvoid srandom(unsigned int seed){\n_seed = seed;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong long llabs(long long x)\n{\nreturn (x < 0) ? -x : x;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdlib/extr_llabs.c_llabs", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nlong long llabs( long long j ) {\nif ( j < 0 ) {\nreturn -j;\n} else {\nreturn j;\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar *setlocale(int category, const char *locale)\n{\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/locale/extr_setlocale.c_setlocale", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar* setlocale( int category, const char* locale ) {\n/* TODO */\n\nreturn NULL;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nstruct _locale_t {int dummy; };\n\nstruct _locale_t *localeconv(struct _locale_t * l)\n{\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/locale/extr_localeconv.c_localeconv", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct lconv {int dummy; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  _locale ;\n\nstruct lconv* localeconv( void ) {\nreturn ( struct lconv* ) &_locale;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar *strncat(char *dst, const char *src, size_t n)\n{\nchar *p = dst;\nwhile (*p)\np++;\nwhile (n--) {\nif (!(*p++ = *src++))\nbreak;\n}\n*p = 0;\nreturn dst;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strncat.c_strncat", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar* strncat( char* d, const char* s, size_t c ) {\nchar* tmp = d;\n\nif ( c > 0 ) {\nwhile ( *d ) d++;\nwhile ( ( *d++ = *s++ ) ) {\nif ( --c == 0 ) {\n*d = 0;\nbreak;\n}\n}\n}\n\nreturn tmp;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar *strchr(char *s, char c)\n{\nwhile (*s && *s != c)\ns++;\nif (*s == c)\nreturn s;\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strchr.c_strchr", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar* strchr( const char* s, int c ) {\nfor ( ; *s != ( char )c; s++ ) {\nif ( *s == 0 ) {\nreturn NULL;\n}\n}\n\nreturn ( char* )s;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint strlen(char *str)\n{\nint i = 0;\nwhile (str[i] != 0)\ni++;\nreturn i;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strlen.c_strlen", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nsize_t strlen( const char* s ) {\nsize_t r = 0;\n\nfor( ; *s++ != 0; r++ ) { }\n\nreturn r;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strlen (char const*) ;\n\nchar *strrchr(const char *s, int c)\n{\nconst char *p = s + strlen(s);\n\nwhile (p > s) {\nif (*p == c)\nreturn (char *)p;\np--;\n}\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strrchr.c_strrchr", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nchar* strrchr( const char* s, int c ) {\nconst char* end = s + strlen( s );\n\ndo {\nif ( *end == ( char )c ) {\nreturn ( char * )end;\n}\n} while ( --end >= s );\n\nreturn NULL;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nchar* malloc (size_t) ;\nint /*<<< orphan*/  memcpy (char*,char const*,size_t) ;\nsize_t strlen (char const*) ;\n\nchar *\nstrndup(const char *s, size_t n)\n{\nchar *copy;\nsize_t len;\n\nlen = strlen(s);\nif (len > n)\nlen = n;\ncopy = malloc(len + 1);\nif (copy != NULL) {\nmemcpy(copy, s, len);\ncopy[len] = '\\0';\n}\nreturn copy;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strndup.c_strndup", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nsize_t MIN (size_t,size_t) ;\nscalar_t__ malloc (size_t) ;\nint /*<<< orphan*/  memcpy (char*,char const*,size_t) ;\nsize_t strlen (char const*) ;\n\nchar* strndup( const char* s, size_t n ) {\nchar* s2;\nsize_t len;\n\nlen = strlen( s );\nlen = MIN( len, n );\n\ns2 = ( char* )malloc( len + 1 );\n\nif ( s2 == NULL ) {\nreturn NULL;\n}\n\nmemcpy( s2, s, len );\ns2[ len ] = '\\0';\n\nreturn s2;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nint strspn(const char *s, const char *accept)\n{\nconst char *p;\nint count = 0;\n\nfor (p = s; *p; ++p)\nif (strchr(accept, *p) == NULL)\nbreak;\n\nfor (; *s; ++s)\nif (strchr(accept, *s) == NULL)\nreturn count;\n\nreturn p - s;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strspn.c_strspn", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nsize_t strspn( const char* s, const char* accept ) {\nsize_t l = 0;\nint a = 1;\nint i;\nint al = strlen( accept );\n\nwhile( ( a ) && ( *s ) )    {\nfor ( a = i = 0; ( !a ) && ( i < al ); i++ ) {\nif ( *s == accept[ i ] ) {\na = 1;\n}\n}\n\nif ( a ) {\nl++;\n}\n\ns++;\n}\n\nreturn l;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint tolower (char const) ;\n\nint strncasecmp(const char *s1, const char *s2, size_t n)\n{\nint c1, c2;\n\nif (n == 0)\nreturn 0;\n\ndo {\nc1 = tolower(*s1++);\nc2 = tolower(*s2++);\n} while (c1 == c2 && c1 != 0 && --n != 0);\n\nreturn c1 - c2;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strncasecmp.c_strncasecmp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint toupper (char const) ;\n\nint strncasecmp( const char* s1, const char* s2, size_t c ) {\nint result = 0;\n\nwhile ( c ) {\nresult = toupper( *s1 ) - toupper( *s2++ );\n\nif ( ( result != 0 ) || ( *s1++ == 0 ) ) {\nbreak;\n}\n\nc--;\n}\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nchar* strtok_r (char*,char*,char**) ;\n\nchar *strtok(char *s, char *delim)\n{\nreturn strtok_r(s, delim, &s);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strtok.c_strtok", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strtok_pos ;\nchar* strtok_r (char*,char const*,int /*<<< orphan*/ *) ;\n\nchar* strtok( char* s, const char* delim ) {\nreturn strtok_r( s, delim, &strtok_pos );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static inline size_t strnlen(const char *s, size_t maxlen)\n{\nconst char *e = s + maxlen;\nwhile (s < e && *s)\ns++;\nreturn s - e;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strnlen.c_strnlen", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nsize_t strnlen( const char* s, size_t count ) {\nconst char* sc;\n\nfor ( sc = s; count-- && ( *sc != 0 ); ++sc ) { }\n\nreturn ( sc - s );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar *strcpy(char *dst, const char *src)\n{\nchar *p = dst;\nwhile (*p++ = *src++);\nreturn dst;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strcpy.c_strcpy", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar* strcpy( char* d, const char* s ) {\nchar* tmp = d;\n\nwhile ( ( *d++ = *s++ ) != 0 ) ;\n\nreturn tmp;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nvoid *memset(void *s, int c, size_t n)\n{\nunsigned char *p = (unsigned char *)s;\n\nwhile (n--)\n*p++ = (unsigned char)c;\n\nreturn s;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_memset.c_memset", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nvoid* memset( void* s, int c, size_t n ) {\nchar* _src;\n\n_src = ( char* )s;\n\nwhile ( n-- ) {\n*_src++ = c;\n}\n\nreturn s;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint strncmp(const char *s1, const char *s2, size_t n)\n{\nwhile (n--) {\nif (*s1 != *s2)\nreturn *s1 - *s2;\nif (!*s1)\nreturn 0;\ns1++;\ns2++;\n}\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strncmp.c_strncmp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint strncmp( const char* s1, const char* s2, size_t c ) {\nint result = 0;\n\nwhile ( c ) {\nresult = *s1 - *s2++;\n\nif ( ( result != 0 ) || ( *s1++ == 0 ) ) {\nbreak;\n}\n\nc--;\n}\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  memcpy (char*,char const*,size_t) ;\nchar* strlen (char const*) ;\n\nchar *strdup(const char *s)\n{\nchar *p;\nsize_t len = strlen(s) + 1;\n\np = (char *)malloc(len);\nif (p)\nmemcpy(p, s, len);\nreturn p;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strdup.c_strdup", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nscalar_t__ malloc (size_t) ;\nint /*<<< orphan*/  memcpy (char*,char const*,size_t) ;\nsize_t strlen (char const*) ;\n\nchar* strdup( const char* s ) {\nchar* s2;\nsize_t length;\n\nlength = strlen( s );\ns2 = ( char* )malloc( length + 1 );\n\nif ( s2 == NULL ) {\nreturn NULL;\n}\n\nmemcpy( s2, s, length + 1 );\n\nreturn s2;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strlen (char const*) ;\nint /*<<< orphan*/  strncmp (char const*,char const*,size_t) ;\n\nchar *strtok_r(const char *s, const char *delim, char **last)\n{\nchar *p;\n\nif (s == NULL)\ns = *last;\np = (char *)s;\nwhile (*p && strncmp(p, delim, strlen(delim)))\np++;\nif (*p) {\n*p++ = '\\0';\nwhile (*p && strncmp(p, delim, strlen(delim)))\np++;\nif (*p)\n*p++ = '\\0';\n}\n*last = p;\nreturn (char *)s;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strtok_r.c_strtok_r", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strcspn (char*,char const*) ;\nint /*<<< orphan*/  strspn (char*,char const*) ;\n\nchar* strtok_r( char* s, const char* delim, char** ptrptr ) {\nchar* tmp = NULL;\n\nif ( s == NULL ) {\ns = *ptrptr;\n}\n\ns += strspn( s, delim );\n\nif ( *s ) {\ntmp = s;\ns += strcspn( s, delim );\n\nif ( *s ) {\n*s++ = 0;\n}\n}\n\n*ptrptr = s;\n\nreturn tmp;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  memset (char*,int /*<<< orphan*/ ,size_t) ;\n\nchar *strncpy(char *dst, const char *src, size_t n)\n{\nsize_t i;\n\nfor (i = 0; i < n && src[i]; i++)\ndst[i] = src[i];\n\nif (i < n)\nmemset(dst + i, 0, n - i);\n\nreturn dst;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strncpy.c_strncpy", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar* strncpy( char* d, const char* s, size_t c ) {\nsize_t i;\nchar* tmp = d;\n\nfor ( i = 0; i < c; i++ ) {\n*d++ = *s;\n\nif ( *s++ == 0 ) {\nbreak;\n}\n}\n\nfor ( ; i < c; i++ ) {\n*d++ = 0;\n}\n\nreturn tmp;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  _vsprintf (char*,char const*,char const**) ;\n\nint\nvsprintf(char *buf, const char *fmt, const char **args)\n{\nreturn _vsprintf(buf, fmt, args);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strcpy.c_vsprintf", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  va_list ;\n\n/* Variables and functions */\nint support_vsprintf (char*,char const*,int /*<<< orphan*/ ) ;\n\nint vsprintf(char* s, const char* format, va_list arg)\n{\nreturn support_vsprintf( s, format, arg );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint strcmp(const char *s1, const char *s2)\n{\nwhile (*s1 == *s2)\n{\nif (!*s1)\nreturn 0;\ns1++;\ns2++;\n}\nreturn *(const unsigned char *)s1 - *(const unsigned char *)s2;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strcmp.c_strcmp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint strcmp( const char* s1, const char* s2 ) {\nint result;\n\nwhile ( 1 ) {\nresult = *s1 - *s2++;\n\nif ( ( result != 0 ) || ( *s1++ == 0 ) ) {\nbreak;\n}\n}\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint memcmp(const void *s1, const void *s2, size_t n)\n{\nconst unsigned char *p1 = s1, *p2 = s2;\n\nwhile (n--)\n{\nif (*p1 != *p2)\nreturn *p1 - *p2;\np1++;\np2++;\n}\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_memcmp.c_memcmp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint memcmp( const void* p1, const void* p2, size_t c ) {\nconst unsigned char* su1, *su2;\nsigned char res = 0;\n\nfor ( su1 = p1, su2 = p2; 0 < c; ++su1, ++su2, c-- ) {\nif ( ( res = *su1 - *su2 ) != 0 ) {\nbreak;\n}\n}\n\nreturn res;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nchar *strpbrk(const char *s, const char *accept)\n{\nconst char *p;\nint i;\n\nfor (p = s; *p; p++) {\nfor (i = 0; accept[i]; i++) {\nif (*p == accept[i]) {\nreturn (char *)p;\n}\n}\n}\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strpbrk.c_strpbrk", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nchar* strpbrk( const char* s, const char* accept ) {\nregister int i, l = strlen( accept );\n\nfor ( ; *s != 0; s++ )\nfor ( i = 0; i < l; i++ )\nif (*s == accept[i])\nreturn (char*)s;\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nsize_t strcspn(const char *s, const char *reject)\n{\nconst char *p;\nint i;\n\nfor (i = 0; i < strlen(reject); i++)\nif (s[i] == reject[i])\nreturn i;\n\nfor (p = s; *p; p++)\nif (strchr(reject, *p))\nreturn p - s;\n\nreturn p - s;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strcspn.c_strcspn", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\n\nsize_t strcspn( const char* s, const char* reject ) {\nsize_t l = 0;\nint a = 1;\nint i;\nint al = strlen( reject );\n\nwhile ( ( a ) && ( *s ) ) {\nfor ( i = 0; ( a ) && ( i < al ); i++ ) {\nif ( *s == reject[ i ] ) {\na = 0;\n}\n}\n\nif ( a ) {\nl++;\n}\n\ns++;\n}\n\nreturn l;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint tolower (char) ;\n\nint strcasecmp(const char *s1, const char *s2)\n{\nwhile (*s1 && *s2)\n{\nint c1 = tolower(*s1++);\nint c2 = tolower(*s2++);\nif (c1 != c2)\nreturn c1 - c2;\n}\nreturn *s1 - *s2;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strcasecmp.c_strcasecmp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint tolower (char const) ;\n\nint strcasecmp( const char* s1, const char* s2 ) {\nint result;\n\nwhile ( 1 ) {\nresult = tolower( *s1 ) - tolower( *s2++ );\n\nif ( ( result != 0 ) || ( *s1++ == 0 ) ) {\nbreak;\n}\n}\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint strlen (char const*) ;\nint /*<<< orphan*/  strncmp (char const*,char const*,int) ;\n\nchar *strstr(const char *s, const char *t)\n{\nint i, j, k;\n\ni = strlen(t);\nif (i == 0)\nreturn (char *)s;\nj = strlen(s);\nfor (k = 0; k <= j - i; k++)\nif (strncmp(s + k, t, i) == 0)\nreturn (char *)(s + k);\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strstr.c_strstr", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  memcmp (char const*,char const*,int) ;\nint strlen (char const*) ;\n\nchar* strstr( const char* s1, const char* s2 ) {\nint l1, l2;\n\nl2 = strlen( s2 );\n\nif ( !l2 ) {\nreturn ( char * )s1;\n}\n\nl1 = strlen( s1 );\n\nwhile ( l1 >= l2 ) {\nl1--;\n\nif ( !memcmp( s1, s2, l2 ) ) {\nreturn ( char * )s1;\n}\n\ns1++;\n}\n\nreturn NULL;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar *strcat(char *dst, const char *src)\n{\nchar *p = dst;\n\nwhile (*p)\np++;\n\nwhile ((*p++ = *src++))\n;\n\nreturn dst;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_strcat.c_strcat", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nchar* strcat( char* d, const char* s ) {\nchar* tmp = d;\n\nwhile ( *d ) d++;\nwhile ( ( *d++ = *s++ ) != 0 ) ;\n\nreturn tmp;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nvoid *memchr(const void *s, int c, size_t n)\n{\nconst unsigned char *cp;\n\nfor (cp = s; 0 < n; ++cp, --n)\nif (*cp == (unsigned char)c)\nreturn (void *)cp;\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/string/extr_memchr.c_memchr", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nvoid* memchr( const void* s, int c, size_t n ) {\nconst unsigned char* src = ( const unsigned char* )s;\nunsigned char ch = c;\n\nfor ( ; n != 0; n-- ) {\nif ( *src == ch ) {\nreturn ( void* )src;\n}\n\nsrc++;\n}\n\nreturn NULL;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  errno ;\nint ioctl (int /*<<< orphan*/ ,int,int) ;\n\nint fcntl(int fd, int cmd, int arg)\n{\nint ret;\n\nret = ioctl(fd, cmd, arg);\nif (ret < 0)\n{\nerrno = -ret;\nreturn -1;\n}\nreturn ret;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/fcntl/extr_fcntl.c_fcntl", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  SYS_fcntl ;\nint errno ;\nint syscall3 (int /*<<< orphan*/ ,int,int,int) ;\n\nint fcntl( int fd, int cmd, ... ) {\nint error;\n\nerror = syscall3( SYS_fcntl, fd, cmd, *( ( ( int* )&cmd ) + 1 ) );\n\nif ( error < 0 ) {\nerrno = -error;\nreturn -1;\n}\n\nreturn error;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  errno ;\nint open (int /*<<< orphan*/ ,char const*,int) ;\n\nint open(const char *path, int flags)\n{\nint fd;\n\nfd = open(\"/dev/null\", flags);\nif (fd < 0)\n{\nerrno = -fd;\nreturn -1;\n}\nreturn fd;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/fcntl/extr_open.c_open", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  SYS_open ;\nint errno ;\nint syscall2 (int /*<<< orphan*/ ,int,int) ;\n\nint open( const char* filename, int flags, ... ) {\nint error;\n\nerror = syscall2( SYS_open, ( int )filename, flags );\n\nif ( error < 0 ) {\nerrno = -error;\nreturn -1;\n}\n\nreturn error;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint O_CREAT ;\nint O_RDWR ;\nint O_TRUNC ;\nint open (char const*,int,int) ;\n\nint creat(const char *path, int mode)\n{\nreturn open(path, O_RDWR | O_CREAT | O_TRUNC, mode);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/fcntl/extr_creat.c_creat", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  mode_t ;\n\n/* Variables and functions */\nint O_CREAT ;\nint O_TRUNC ;\nint O_WRONLY ;\nint open (char const*,int,int /*<<< orphan*/ ) ;\n\nint creat( const char *pathname, mode_t mode ) {\nreturn open( pathname, O_CREAT | O_WRONLY | O_TRUNC, mode );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*,char*) ;\nint /*<<< orphan*/  stderr ;\nchar* strerror (int /*<<< orphan*/ ) ;\n\nvoid perror(const char *s)\n{\nif (s)\nfprintf(stderr, \"%s: \", s);\nfprintf(stderr, \"%s\\n\", strerror(errno));\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_perror.c_perror", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*,char const*) ;\nint /*<<< orphan*/  stderr ;\nchar* strerror (int /*<<< orphan*/ ) ;\n\nvoid perror( const char* s ) {\nif ( s != NULL ) {\nfprintf( stderr, \"%s\", s );\n}\n\nfprintf( stderr, \": %s\\n\", strerror( errno ) );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int ungotten; char ungotten_char; int /*<<< orphan*/  ungotten_flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint /*<<< orphan*/  _IOEOF ;\nint /*<<< orphan*/  _IOERR ;\nint /*<<< orphan*/  _IOREAD ;\n\nint ungetc(int c, FILE *fp)\n{\nif (c == EOF || fp->ungotten)\nreturn EOF;\nfp->ungotten = 1;\nfp->ungotten_char = c;\nfp->ungotten_flags = _IOREAD | _IOEOF | ~_IOERR;\nreturn c;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_ungetc.c_ungetc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int has_ungotten; unsigned char unget_buffer; int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint __FILE_EOF ;\nint __FILE_ERROR ;\n\nint ungetc( int c, FILE* stream ) {\nif ( ( stream->has_ungotten ) ||\n( c < 0 ) ||\n( c > 255 ) ) {\nreturn EOF;\n}\n\nstream->has_ungotten = 1;\nstream->unget_buffer = ( unsigned char )c;\nstream->flags &= ~( __FILE_EOF | __FILE_ERROR );\n\nreturn c;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static int supcon_lenp(int len)\n{\nif (len < 16)\nreturn 1;\nif (len < 256)\nreturn 2;\nif (len < 4096)\nreturn 3;\nif (len < 65536)\nreturn 4;\nif (len < 1048576)\nreturn 5;\nif (len < 16777216)\nreturn 6;\nif (len < 268435456)\nreturn 7;\nreturn 8;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_lenp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  supcon_lenp(unsigned int p)\n{\nif ( p < 0x10 ) return 1;\nif ( p < 0x100 ) return 2;\nif ( p < 0x1000 ) return 3;\nif ( p < 0x10000 ) return 4;\nif ( p < 0x100000 ) return 5;\nif ( p < 0x1000000 ) return 6;\nif ( p < 0x10000000 ) return 7;\n\nreturn 8;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint O_APPEND ;\nint O_CREAT ;\nint O_EXCL ;\nint O_RDONLY ;\nint O_RDWR ;\nint O_TRUNC ;\nint O_WRONLY ;\n\n__attribute__((used)) static int __parse_mode(const char *mode, int def)\n{\nint ret = def;\n\nwhile (*mode) {\nswitch (*mode) {\ncase 'r':\nret &= ~(O_RDWR | O_WRONLY);\nret |= O_RDONLY;\nbreak;\ncase 'w':\nret &= ~(O_RDONLY | O_RDWR);\nret |= O_WRONLY;\nbreak;\ncase 'a':\nret &= ~(O_RDONLY | O_RDWR);\nret |= O_APPEND | O_WRONLY;\nbreak;\ncase '+':\nret &= ~(O_RDONLY | O_WRONLY);\nret |= O_RDWR;\nbreak;\ncase 'x':\nret |= O_EXCL;\nbreak;\ncase 'c':\nret |= O_CREAT;\nbreak;\ncase 't':\nret |= O_TRUNC;\nbreak;\n}\nmode++;\n}\nreturn ret;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fopen.c___parse_mode", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint O_APPEND ;\nint O_CREAT ;\nint O_RDONLY ;\nint O_RDWR ;\nint O_TRUNC ;\nint O_WRONLY ;\n\nint __parse_mode( const char* mode ) {\nint mode_flags = 0;\n\nfor ( ;; ) {\nswitch ( *mode ) {\ncase 0 : return mode_flags;\ncase 'b': break;\ncase 'r': mode_flags = O_RDONLY; break;\ncase 'w': mode_flags = O_WRONLY | O_CREAT | O_TRUNC; break;\ncase 'a': mode_flags = O_WRONLY | O_CREAT | O_APPEND; break;\ncase '+': mode_flags = ( mode_flags & ( ~O_WRONLY ) ) | O_RDWR; break;\ndefault : break;\n}\n\n++mode;\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; int /*<<< orphan*/  fd; int /*<<< orphan*/  pos; int /*<<< orphan*/  base; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint F_UNGOT ;\nint F_UNGOTEOF ;\nint SEEK_CUR ;\nint /*<<< orphan*/  lseek (int /*<<< orphan*/ ,int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\n\nlong ftello(FILE *stream)\n{\nlong pos;\n\nif (stream->flags & (F_UNGOT | F_UNGOTEOF))\nreturn -1L;\n\npos = lseek(stream->fd, 0, SEEK_CUR);\nif (pos == -1L)\nreturn -1L;\n\nif (stream->flags & F_UNGOTEOF)\npos -= stream->base + stream->pos;\n\nreturn pos;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_ftell.c_ftello", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\ntypedef  int off_t ;\nstruct TYPE_3__ {int flags; int buffer_data_size; int buffer_pos; int has_ungotten; int /*<<< orphan*/  fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SEEK_CUR ;\nint __FILE_BUFINPUT ;\nint __FILE_EOF ;\nint __FILE_ERROR ;\nint lseek (int /*<<< orphan*/ ,int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\n\noff_t ftello( FILE* stream ) {\noff_t l;\n\nif ( stream->flags & ( __FILE_EOF | __FILE_ERROR ) ) {\nreturn -1;\n}\n\nl = lseek( stream->fd, 0, SEEK_CUR );\n\nif ( l == ( off_t )-1 ) {\nreturn -1;\n}\n\nif ( stream->flags & __FILE_BUFINPUT ) {\nreturn l - ( stream->buffer_data_size - stream->buffer_pos ) - stream->has_ungotten;\n} else {\nreturn l + stream->buffer_pos;\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint _vsnprintf (char*,int,char const*,__va_list) ;\n\nint vsnprintf(char *buf, int size, const char *fmt, __va_list ap)\n{\nreturn _vsnprintf(buf, size, fmt, ap);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_pf.c_vsnprintf", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  va_list ;\n\n/* Variables and functions */\nint support_vsprintf (char*,char const*,int /*<<< orphan*/ ) ;\n\nint vsnprintf(char* str, size_t size, const char *format, va_list arg_ptr) {\nreturn support_vsprintf(str,format,arg_ptr);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static int\nbufcon_leni(int i)\n{\nif (i < 0)\ni = -i;\nif (i < 10)\nreturn 1;\nif (i < 100)\nreturn 2;\nif (i < 1000)\nreturn 3;\nif (i < 10000)\nreturn 4;\nif (i < 100000)\nreturn 5;\nif (i < 1000000)\nreturn 6;\nif (i < 10000000)\nreturn 7;\nif (i < 100000000)\nreturn 8;\nif (i < 1000000000)\nreturn 9;\nreturn 10;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_leni", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  bufcon_leni(int num)\n{\nint p;\nint sign;\n\nif ( num < 0 )\n{\np = -num;\nsign = 1;\n}\nelse\n{\np = num;\nsign = 0;\n}\n\nif ( p < 10 ) return sign + 1;\nif ( p < 100 ) return sign + 2;\nif ( p < 1000 ) return sign + 3;\nif ( p < 10000 ) return sign + 4;\nif ( p < 100000 ) return sign + 5;\nif ( p < 1000000 ) return sign + 6;\nif ( p < 10000000 ) return sign + 7;\nif ( p < 100000000 ) return sign + 8;\nif ( p < 1000000000 ) return sign + 9;\n\nreturn 10;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; int /*<<< orphan*/  fd; scalar_t__ offset; scalar_t__ error; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  FD_CLOEXEC ;\nint /*<<< orphan*/  FD_PRIVATE ;\nint /*<<< orphan*/  fcntl (int /*<<< orphan*/ ,int,int) ;\nint /*<<< orphan*/  fflush (TYPE_1__*) ;\n\nint fseeko(FILE *stream, off_t offset, int whence)\n{\nfflush(stream);\nstream->error = 0;\nstream->flags &= ~(FD_CLOEXEC | FD_PRIVATE);\nstream->offset = 0;\nif (fcntl(stream->fd, F_SETFD, 0) == -1)\nreturn -1;\nreturn fseeko(stream, offset, whence);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fseek.c_fseeko", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_4__   TYPE_1__ ;\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  off_t ;\nstruct TYPE_4__ {int flags; int /*<<< orphan*/  fd; scalar_t__ has_ungotten; scalar_t__ buffer_data_size; scalar_t__ buffer_pos; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_EOF ;\nint __FILE_ERROR ;\nint /*<<< orphan*/  fflush (TYPE_1__*) ;\nint lseek (int /*<<< orphan*/ ,int /*<<< orphan*/ ,int) ;\n\nint fseeko( FILE* stream, off_t offset, int whence ) {\nfflush( stream );\n\nstream->buffer_pos = 0;\nstream->buffer_data_size = 0;\nstream->flags &= ~( __FILE_EOF | __FILE_ERROR );\nstream->has_ungotten = 0;\n\nreturn ( lseek( stream->fd, offset, whence ) != -1 ? 0 : -1 );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  lua_State ;\n\n/* Variables and functions */\nint /*<<< orphan*/  LUA_RIDX_GLOBALS ;\nint /*<<< orphan*/  lua_pushnil (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  lua_rawseti (int /*<<< orphan*/ *,int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\n\n__attribute__((used)) static void rewind (lua_State *L) {\nlua_pushnil(L);\nlua_rawseti(L, LUA_RIDX_GLOBALS, 0);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_rewind.c_rewind", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SEEK_SET ;\nint /*<<< orphan*/  clearerr (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fseek (int /*<<< orphan*/ *,long,int /*<<< orphan*/ ) ;\n\nvoid rewind( FILE* stream ) {\nclearerr( stream );\nfseek( stream, 0L, SEEK_SET );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int _flag; scalar_t__ _buf; scalar_t__ _bufsiz; scalar_t__ _tmpfname; scalar_t__ _tmpfname_len; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint _IOFBF ;\nint _IONBF ;\nint _IOLBF ;\nint /*<<< orphan*/  _free_tmpname (scalar_t__) ;\nscalar_t__ _get_tmpname (scalar_t__,int) ;\nint /*<<< orphan*/  _set_buffer (TYPE_1__*,int) ;\nint /*<<< orphan*/  _unlock_file (TYPE_1__*,int) ;\n\nint setvbuf(FILE *stream, char *buf, int mode, size_t size)\n{\nif (buf)\n{\nif (!(stream->_flag & (_IOFBF | _IOLBF)))\n{\n_free_tmpname(stream->_tmpfname);\nstream->_flag |= _IOFBF;\nstream->_buf = buf;\n}\nstream->_bufsiz = size;\n}\nelse if (size)\n{\nif (!(stream->_flag & _IONBF))\n{\n_free_tmpname(stream->_tmpfname);\nstream->_flag |= _IONBF;\nstream->_buf = _get_tmpname(size, 0);\nstream->_tmpfname = stream->_buf;\nstream->_tmpfname_len = size;\n}\n}\nelse\n{\n_unlock_file(stream, 0);\nreturn -1;\n}\n\n_set_buffer(stream, mode);\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_setvbuf.c_setvbuf", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_4__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_4__ {int flags; char* buffer; size_t buffer_size; scalar_t__ buffer_data_size; scalar_t__ buffer_pos; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_DONTFREEBUF ;\nint /*<<< orphan*/  free (char*) ;\nscalar_t__ malloc (size_t) ;\nint set_flags (TYPE_1__*,int) ;\n\nint setvbuf( FILE* stream, char* buf, int flags, size_t size ) {\nif ( buf != NULL ) {\nif ( ( stream->flags & __FILE_DONTFREEBUF ) == 0 ) {\nfree( stream->buffer );\n}\n\nstream->buffer = buf;\nstream->flags |= __FILE_DONTFREEBUF;\n} else {\nchar *tmp;\n\nif ( size == 0 ) {\nreturn set_flags( stream, flags );\n}\n\ntmp = ( char* )malloc( size );\n\nif ( tmp == NULL ) {\nreturn -1;\n}\n\nif ( ( stream->flags & __FILE_DONTFREEBUF ) == 0 ) {\nfree( stream->buffer );\n}\n\nstream->buffer = tmp;\nstream->flags &= ~__FILE_DONTFREEBUF;\n}\n\nstream->buffer_size = size;\nstream->buffer_pos = 0;\nstream->buffer_data_size = 0;\n\nreturn set_flags( stream, flags );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  supcon_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*,...) ;\nint /*<<< orphan*/  stderr ;\nint /*<<< orphan*/  supcon_puts (char*,int /*<<< orphan*/ ) ;\n\n__attribute__((used)) static void supcon_putui (int i, supcon_t supcon) {\nchar buf[128];\nchar *p = buf + 127;\nint j;\n\nif (i == 0) {\nsupcon_puts (\"0\", supcon);\nreturn;\n}\n\nfor (j = 0; j < 128; j++) {\n*p-- = '0' + (i % 10);\ni /= 10;\nif (i == 0) {\nbreak;\n}\n}\n\nsupcon_puts (p + 1, supcon);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_putui", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char*,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid  supcon_putui( unsigned int num )\n{\nchar buffer[ 128 ];\t// You're generous.\nint position = 126;\nunsigned int temp = num;\n\n// Short circuit unnecessary work.\nif ( num == 0 )\n{\nfputs(\"0\",stdout);\nreturn;\n}\n\nbuffer[127] = 0;\n\n// Now reduce it.\nwhile ( temp > 0 )\n{\nbuffer[ position-- ] = '0' + (temp % 10);\ntemp = temp / 10;\n}\n\n// Now print it.\nfputs(buffer + position + 1 ,stdout);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static int supcon_leni(int i)\n{\nif (i < 0)\ni = -i;\nif (i < 10)\nreturn 1;\nif (i < 100)\nreturn 2;\nif (i < 1000)\nreturn 3;\nif (i < 10000)\nreturn 4;\nif (i < 100000)\nreturn 5;\nif (i < 1000000)\nreturn 6;\nif (i < 10000000)\nreturn 7;\nif (i < 100000000)\nreturn 8;\nif (i < 1000000000)\nreturn 9;\nreturn 10;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_leni", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  supcon_leni(int num)\n{\nint p;\nint sign;\n\nif ( num < 0 )\n{\np = -num;\nsign = 1;\n}\nelse\n{\np = num;\nsign = 0;\n}\n\nif ( p < 10 ) return sign + 1;\nif ( p < 100 ) return sign + 2;\nif ( p < 1000 ) return sign + 3;\nif ( p < 10000 ) return sign + 4;\nif ( p < 100000 ) return sign + 5;\nif ( p < 1000000 ) return sign + 6;\nif ( p < 10000000 ) return sign + 7;\nif ( p < 100000000 ) return sign + 8;\nif ( p < 1000000000 ) return sign + 9;\n\nreturn 10;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  supcon_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*,...) ;\nint /*<<< orphan*/  stderr ;\n\n__attribute__((used)) static void supcon_putp(supcon_t supcon, int p)\n{\nchar buf[128];\nchar *pbuf = buf + 127;\n\n*pbuf = 0;\nwhile (p) {\n*--pbuf = (p & 0x0f) + '0';\nif (*pbuf > '9')\n*pbuf += 7;\np >>= 4;\n}\nfprintf(stderr, \"%s\\n\", pbuf);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_putp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char*,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid  supcon_putp( unsigned int num, char offset )\n{\nchar buffer[ 128 ];\t// You're generous.\nint position = 126;\nunsigned int temp = num;\nint value;\n\n// Short circuit unnecessary work.\nif ( num == 0 )\n{\nfputs(\"0\",stdout);\nreturn;\n}\n\nbuffer[127] = 0;\n\n// Now reduce it.\nwhile ( temp > 0 )\n{\nvalue = temp % 16;\nif ( value < 10 ) buffer[ position-- ] = '0' + value;\nelse  buffer[ position-- ] = offset - 10 + value;\ntemp = temp / 16;\n}\n\n// Now print it.\nfputs(buffer + position + 1 ,stdout);\n\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\n\nint fileno(FILE *fp)\n{\nreturn fp->fd;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fileno.c_fileno", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\n\nint fileno( FILE* stream ) {\nreturn stream->fd;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint EOF ;\nscalar_t__ feof (int /*<<< orphan*/ *) ;\nint fgetc (int /*<<< orphan*/ *) ;\n\nchar *fgets(char *s, int n, FILE *stream)\n{\nint c;\nchar *p = s;\n\nwhile (--n > 0 && (c = fgetc(stream)) != EOF && c != '\\n')\n*p++ = c;\n\nif (c == EOF && n > 0)\nreturn NULL;\n\n*p = '\\0';\n\nreturn s;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fgets.c_fgets", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint EOF ;\nscalar_t__ ferror (int /*<<< orphan*/ *) ;\nint fgetc (int /*<<< orphan*/ *) ;\n\nchar* fgets( char* s, int size, FILE* stream ) {\nchar* orig = s;\nint l;\n\nfor ( l = size; l > 1; ) {\nregister int c = fgetc( stream );\n//printf(\"c:  %c \\n\");\nif ( c == EOF ) {\nbreak;\n}\n\n*s = c;\n++s;\n--l;\n\nif ( c == '\\n' ) {\nbreak;\n}\n}\n\nif ( ( l == size ) || ( ferror( stream ) ) ) {\nreturn 0;\n}\n\n*s = 0;\n\nreturn orig;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint vfwprintf (int /*<<< orphan*/ *,char const*,int /*<<< orphan*/ ) ;\n\nint vfprintf(FILE *stream, const char *format, va_list ap)\n{\nreturn vfwprintf(stream, format, ap);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_putc.c_vfprintf", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  va_list ;\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint support_vfprintf (int /*<<< orphan*/ *,char const*,int /*<<< orphan*/ ) ;\n\nint vfprintf(FILE* stream, const char* format, va_list arg)\n{\nreturn support_vfprintf( stream, format, arg );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int /*<<< orphan*/ * fp; int /*<<< orphan*/  mode; int /*<<< orphan*/  flags; int /*<<< orphan*/ * buf; int /*<<< orphan*/  name; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  FOPEN_MAX ;\nint /*<<< orphan*/  _IOFBF ;\nint /*<<< orphan*/  _IOMYBUF ;\nint /*<<< orphan*/  _IOREAD ;\nint /*<<< orphan*/  _IOWRT ;\nint /*<<< orphan*/  fclose (TYPE_1__*) ;\nint /*<<< orphan*/  fflush (TYPE_1__*) ;\nTYPE_1__* malloc (int) ;\nint /*<<< orphan*/  memset (TYPE_1__*,int /*<<< orphan*/ ,int) ;\nint /*<<< orphan*/  strcpy (int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  strlen (int /*<<< orphan*/ ) ;\n\nFILE *__init_file(int fd, int mode, int bufsize)\n{\nFILE *fp;\n\nif ((fp = malloc(sizeof(FILE))) == NULL)\nreturn NULL;\n\nmemset(fp, 0, sizeof(FILE));\n\nif ((fp->fp = fdopen(fd, mode ? \"w\" : \"r\")) == NULL) {\nfclose(fp);\nreturn NULL;\n}\n\nfp->name = fd;\nfp->mode = mode ? _IOWRT : _IOREAD;\nif (bufsize == 0)\nfp->flags = _IOFBF;\nelse if (bufsize == -1)\nfp->flags = _IOMYBUF;\nelse if (bufsize == -2)\nfp->flags = _IOFBF | _IOMYBUF;\nelse\nfp->flags = _IOFBF;\nfp->buf = NULL;\n\nreturn fp;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fopen.c___init_file", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_4__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_4__ {char* buffer; int fd; int flags; int buffer_size; scalar_t__ has_ungotten; scalar_t__ buffer_data_size; scalar_t__ buffer_pos; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\n#define  O_RDONLY 130\n#define  O_RDWR 129\n#define  O_WRONLY 128\nint _IO_BUFSIZE ;\nint __FILE_CAN_READ ;\nint __FILE_CAN_WRITE ;\nint /*<<< orphan*/  close (int) ;\nint /*<<< orphan*/  free (TYPE_1__*) ;\nscalar_t__ malloc (int) ;\n\nFILE* __init_file( int fd, int close_on_error, int mode ) {\nFILE* stream;\n\nstream = ( FILE* )malloc( sizeof( FILE ) );\n\nif ( stream == NULL ) {\nif ( close_on_error ) {\nclose( fd );\n}\n\nreturn NULL;\n}\n\nstream->buffer = ( char* )malloc( _IO_BUFSIZE );\n\nif ( stream->buffer == NULL ) {\nfree( stream );\n\nif ( close_on_error ) {\nclose( fd );\n}\n\nreturn NULL;\n}\n\nstream->fd = fd;\nstream->flags = 0;\nstream->buffer_pos = 0;\nstream->buffer_size = _IO_BUFSIZE;\nstream->buffer_data_size = 0;\n\nswitch ( mode & O_RDWR ) {\ncase O_RDWR :   stream->flags |= ( __FILE_CAN_WRITE | __FILE_CAN_READ ); break;\ncase O_RDONLY : stream->flags |= __FILE_CAN_READ; break;\ncase O_WRONLY : stream->flags |= __FILE_CAN_WRITE; break;\ndefault : break;\n}\n\nstream->has_ungotten = 0;\n\nreturn stream;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint bufcon_lenui(int len)\n{\nif (len < 10)\nreturn 1;\nif (len < 100)\nreturn 2;\nif (len < 1000)\nreturn 3;\nif (len < 10000)\nreturn 4;\nif (len < 100000)\nreturn 5;\nif (len < 1000000)\nreturn 6;\nif (len < 10000000)\nreturn 7;\nif (len < 100000000)\nreturn 8;\nif (len < 1000000000)\nreturn 9;\nreturn 10;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_lenui", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  bufcon_lenui(unsigned int p)\n{\n\nif ( p < 10 ) return 1;\nif ( p < 100 ) return 2;\nif ( p < 1000 ) return 3;\nif ( p < 10000 ) return 4;\nif ( p < 100000 ) return 5;\nif ( p < 1000000 ) return 6;\nif ( p < 10000000 ) return 7;\nif ( p < 100000000 ) return 8;\nif ( p < 1000000000 ) return 9;\n\nreturn 10;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; int /*<<< orphan*/  lock; scalar_t__ fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint _IOMYBUF ;\nint /*<<< orphan*/  flockfile (TYPE_1__*) ;\nint /*<<< orphan*/  funlockfile (TYPE_1__*) ;\nint /*<<< orphan*/  free (TYPE_1__*) ;\nint /*<<< orphan*/  pclose (scalar_t__) ;\nint /*<<< orphan*/  pclose_unlocked (scalar_t__) ;\nint /*<<< orphan*/  pclose_unlocked_check_status (scalar_t__) ;\nint /*<<< orphan*/  pclose_unlocked_set_status (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_close (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_close_and_free (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_close (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_close_and_free (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free (scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_free_and_close_and_free (scalar_0__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  pclose_unlocked_set_status_and_errno_and_free_and_free_and_free_and_free_and_free_and_free", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fclose.c_fclose", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_5__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_5__ {int flags; struct TYPE_5__* buffer; int /*<<< orphan*/  fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_DONTFREEBUF ;\nint close (int /*<<< orphan*/ ) ;\nint fflush (TYPE_1__*) ;\nint /*<<< orphan*/  free (TYPE_1__*) ;\n\nint fclose( FILE* stream ) {\nint result;\n\nresult = fflush( stream );\nresult |= close( stream->fd );\n\nif ( ( ( stream->flags & __FILE_DONTFREEBUF ) == 0 ) &&\n( stream->buffer != NULL ) ) {\nfree( stream->buffer );\n}\n\nfree( stream );\n\nreturn result;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  lua_State ;\n\n/* Variables and functions */\nint luaL_checkinteger (int /*<<< orphan*/ *,int) ;\n\n__attribute__((used)) static int bufcon_lenx (lua_State *L) {\nreturn luaL_checkinteger(L, 2) + 2;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_lenx", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint bufcon_lenp (unsigned int) ;\n\nint  bufcon_lenx( unsigned int  p )\n{\nreturn (bufcon_lenp( p ) + 2);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char*,int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  stdout ;\n\nvoid supcon_putc(char c)\n{\nchar s[2];\ns[0] = c;\ns[1] = 0;\nfputs(s, stdout);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_putc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char const*,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid supcon_putc( unsigned char c )\n{\nchar buffer[2];\nbuffer[0] = c;\nbuffer[1] = 0;\n\nfputs((const char *)buffer,stdout);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  fputc (char,int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fputs_ (char const*,int /*<<< orphan*/ *) ;\n\nint fputs(const char *s, FILE *stream)\n{\nwhile (*s)\nfputc(*s++, stream);\nfputs_(\"\\n\", stream);\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fputs.c_fputs", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  fflush (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fputc (int /*<<< orphan*/ ,int /*<<< orphan*/ *) ;\n\nint fputs( const char* s, FILE* stream ) {\nwhile ( *s ) {\nfputc( *s++, stream );\n}\n\nfflush( stream );\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static int supcon_lenui(int n)\n{\nif (n < 10)\nreturn 1;\nif (n < 100)\nreturn 2;\nif (n < 1000)\nreturn 3;\nif (n < 10000)\nreturn 4;\nif (n < 100000)\nreturn 5;\nif (n < 1000000)\nreturn 6;\nif (n < 10000000)\nreturn 7;\nif (n < 100000000)\nreturn 8;\nif (n < 1000000000)\nreturn 9;\nreturn 10;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_lenui", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  supcon_lenui(unsigned int p)\n{\n\nif ( p < 10 ) return 1;\nif ( p < 100 ) return 2;\nif ( p < 1000 ) return 3;\nif ( p < 10000 ) return 4;\nif ( p < 100000 ) return 5;\nif ( p < 1000000 ) return 6;\nif ( p < 10000000 ) return 7;\nif ( p < 100000000 ) return 8;\nif ( p < 1000000000 ) return 9;\n\nreturn 10;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int fd; int /*<<< orphan*/  fp; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EINVAL ;\nint /*<<< orphan*/  close (int) ;\nint dup (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fclose (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fdopen (int,char*) ;\nint /*<<< orphan*/  fflush (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fp ;\nint /*<<< orphan*/  setvbuf (int /*<<< orphan*/ *,int /*<<< orphan*/ ,int,int) ;\n\nFILE *freopen(const char *path, const char *mode, FILE *stream)\n{\nint fd;\n\nif (stream == NULL)\nreturn NULL;\n\nfd = dup(fp);\nif (fd == -1)\nreturn NULL;\n\nfflush(stream);\nclose(stream->fd);\nstream->fd = fd;\nstream->fp = fdopen(fd, mode);\nif (stream->fp == NULL)\nreturn NULL;\n\nsetvbuf(stream->fp, NULL, _IONBF, 0);\n\nreturn stream;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_freopen.c_freopen", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_5__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_5__ {int fd; int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\n#define  O_RDONLY 130\n#define  O_RDWR 129\n#define  O_WRONLY 128\nint __FILE_CAN_READ ;\nint __FILE_CAN_WRITE ;\nint __parse_mode (char const*) ;\nint /*<<< orphan*/  close (int) ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  fflush (TYPE_1__*) ;\nint open (char const*,int,int) ;\n\nFILE* freopen( const char* path, const char* mode, FILE* stream ) {\nint flags;\n\nif ( stream == NULL ) {\nerrno = -EINVAL;\nreturn NULL;\n}\n\nflags = __parse_mode( mode );\n\nfflush( stream );\nclose( stream->fd );\n\nstream->fd = open( path, flags, 0666 );\n\nif ( stream->fd != -1 ) {\nstream->flags = 0;\n\nswitch ( flags & 3 ) {\ncase O_RDWR :   stream->flags |= ( __FILE_CAN_READ | __FILE_CAN_WRITE ); break;\ncase O_RDONLY : stream->flags |= __FILE_CAN_READ; break;\ncase O_WRONLY : stream->flags |= __FILE_CAN_WRITE; break;\n}\n}\n\nreturn stream;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct buffered_connection {int dummy; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  bufcon_put (struct buffered_connection*,char const*) ;\n\nchar *\nbufcon_puts(struct buffered_connection *b, const char *s)\n{\nbufcon_put(b, s);\nreturn (char *)s;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_puts", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strcat (char*,char*) ;\n\nchar*  bufcon_puts( char *buffer, char *str )\n{\nstrcat( buffer, str );\nreturn buffer;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  BIO ;\n\n/* Variables and functions */\nint /*<<< orphan*/  BIO_putc (int /*<<< orphan*/ *,char) ;\n\nBIO *bufcon_puti(BIO *bio, int num)\n{\nint i;\nint sign = 0;\n\nif (num < 0) {\nBIO_putc(bio, '-');\nnum = -num;\n}\n\nfor (i = 1000000000; i > 1; i /= 10) {\nif (num / i) {\nsign = 1;\nbreak;\n}\n}\n\nif (!sign)\nBIO_putc(bio, '0');\n\nfor (i = 1000000000; i > 1; i /= 10) {\nif (num / i) {\nBIO_putc(bio, (num / i) + '0');\nnum %= i;\n}\n}\n\nreturn bio;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_puti", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  bufcon_putc (char*,unsigned int) ;\n\nchar*  bufcon_puti( char *buffer, int num )\n{\nunsigned int divisor;\nunsigned int current;\nunsigned int remainder;\nunsigned int found;\n\nif ( num < 0 )\n{\nbufcon_putc( buffer, '-' );\ncurrent = -num;\n}\nelse current = num;\n\ndivisor = 1000000000;\nfound = 0;\n\nwhile (divisor > 0)\n{\nremainder = current % divisor;\ncurrent = current / divisor;\n\nif ( current != 0 ) found = 1;\nif ( found   != 0 ) bufcon_putc( buffer, current + '0' );\n\ndivisor = divisor / 10;\ncurrent = remainder;\n}\n\nif ( found == 0 ) bufcon_putc( buffer, current + '0' );\n\nreturn buffer;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  u8 ;\n\n/* Variables and functions */\nint /*<<< orphan*/  supcon_put (int /*<<< orphan*/ *,int) ;\n\nvoid supcon_putX(u8 *dst)\n{\nsupcon_put(dst, 0x41);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_putX", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  supcon_putp (unsigned int,char) ;\n\nvoid  supcon_putX( unsigned int num )\n{\nsupcon_putp( num, 'A' );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ eof; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint _IOEOF ;\n\nint feof(FILE *stream)\n{\nreturn stream->eof ? 1 : (stream->flags & _IOEOF) != 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_feof.c_feof", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ has_ungotten; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_EOF ;\n\nint feof( FILE* stream ) {\nif ( stream->has_ungotten ) {\nreturn 0;\n}\n\nreturn ( stream->flags & __FILE_EOF );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char) ;\n\nint printf_buffer(int len)\n{\nint i;\nfor (i = 0; i < len; i++)\nprintf(' ');\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_pf.c_printf_buffer", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  supcon_putc (char) ;\n\nint printf_buffer(int i)\n{\nint j;\nif ( i <= 0 ) return 0;\nfor ( j = 0; j < i; j++) supcon_putc(' ');\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ rpos; scalar_t__ wpos; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint _IOEOF ;\nint _IOREAD ;\nint /*<<< orphan*/  flushbuf (TYPE_1__*) ;\n\nint fpurge(FILE *fp)\n{\nif (fp->flags & _IOEOF)\nreturn 0;\nfp->flags &= ~_IOREAD;\nfp->rpos = fp->wpos = 0;\nif (fp->flags & _IOEOF)\nreturn 0;\nflushbuf(fp);\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fpurge.c_fpurge", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ buffer_pos; scalar_t__ buffer_data_size; scalar_t__ has_ungotten; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_BUFINPUT ;\nint __FILE_NOBUF ;\n\nint fpurge( FILE* stream ) {\nif ( stream->flags & __FILE_NOBUF ) {\nreturn 0;\n}\n\nstream->has_ungotten = 0;\n\nif ( stream->flags & __FILE_BUFINPUT ) {\nstream->buffer_pos = stream->buffer_data_size;\n} else {\nstream->buffer_pos = 0;\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint EACCES ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  perror (char*,char const*) ;\n\nint rename(const char *old, const char *new)\n{\nperror(\"rename\", old);\nerrno = EACCES;\nreturn -1;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_rename.c_rename", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  ENOSYS ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  printf (char*,char const*,char const*) ;\n\nint rename( const char* oldpath, const char* newpath ) {\nprintf( \"TODO: rename not yet implemented! (from: %s to: %s)\\n\", oldpath, newpath );\n\nerrno = -ENOSYS;\n\nreturn -1;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  supcon_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  supcon_putc (int /*<<< orphan*/ *,char) ;\n\nvoid supcon_putx(supcon_t *supcon, int x)\n{\nsupcon_putc(supcon, '0' + x);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_putx", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  supcon_putp (unsigned int,char) ;\n\nvoid  supcon_putx( unsigned int num )\n{\nsupcon_putp( num, 'a' );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ rpos; scalar_t__ rlen; scalar_t__ rbuf; scalar_t__ rbuf_size; int /*<<< orphan*/  rfd; int /*<<< orphan*/  rfd_name; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint F_ERR ;\nint F_EOF ;\nint /*<<< orphan*/  fflush (TYPE_1__*) ;\nscalar_t__ fread (char*,int /*<<< orphan*/ ,int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fseek (int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_fd (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd (int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd_buf (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd_buf_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd_buf_len_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_buf_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_buf (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_buf_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_buf_len_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_buf_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd_pos_len_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_len_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len_pos_buf (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len_pos_buf_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len_pos_buf_len_pos (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len_pos_buf_len_pos_buf (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__) ;\nint /*<<< orphan*/  fsync_name_fd_pos_pos_buf_pos_len_pos_buf_len_pos_buf_len (int /*<<< orphan*/ ,int /*<<< orphan*/ ,scalar_t__,int /*<<< orphan*/ ,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_t__,scalar_", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fgetc.c_fgetc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_5__   TYPE_1__ ;\n\n/* Type definitions */\ntypedef  scalar_t__ ssize_t ;\nstruct TYPE_5__ {int flags; int unget_buffer; size_t buffer_pos; size_t buffer_data_size; unsigned char* buffer; int /*<<< orphan*/  buffer_size; int /*<<< orphan*/  fd; scalar_t__ has_ungotten; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint /*<<< orphan*/  __FILE_BUFINPUT ;\nint __FILE_CAN_READ ;\nint __FILE_EOF ;\nint __FILE_ERROR ;\nscalar_t__ __set_stream_flags (TYPE_1__*,int /*<<< orphan*/ ) ;\nscalar_t__ feof (TYPE_1__*) ;\nint /*<<< orphan*/  printf (char*) ;\nscalar_t__ read (int /*<<< orphan*/ ,unsigned char*,int /*<<< orphan*/ ) ;\n\nint fgetc( FILE* stream ) {\nunsigned char c;\n\n/* Check if we can read from the stream */\n\nif ( ( ( stream->flags & __FILE_CAN_READ ) == 0 ) ||\n( __set_stream_flags( stream, __FILE_BUFINPUT ) ) ) {\nstream->flags |= __FILE_ERROR;\nprintf(\"EOF ! \\n\");\nreturn EOF;\n}\n\n/* Check the unget buffer */\n\nif ( stream->has_ungotten ) {\nstream->has_ungotten = 0;\nprintf(\"un get ! \\n\");\nreturn stream->unget_buffer;\n}\n\n/* Check the end of the file */\n\nif ( feof( stream ) ) {\nprintf(\"EOF ! \\n\");\nreturn EOF;\n}\n\n/* Fill the buffer if it's empty */\n\nif ( stream->buffer_pos >= stream->buffer_data_size ) {\nssize_t length;\n\nlength = read( stream->fd, stream->buffer, stream->buffer_size );\nif ( length == 0 ) {\nstream->flags |= __FILE_EOF;\nprintf(\"EOF ! \\n\");\nreturn EOF;\n} else if ( length < 0 ) {\nstream->flags |= __FILE_ERROR;\nprintf(\"EOF ! \\n\");\nreturn EOF;\n}\nstream->buffer_pos = 0;\nstream->buffer_data_size = length;\n}\n\n/* Get one character from the buffer */\n\nc = stream->buffer[ stream->buffer_pos ];\n\nstream->buffer_pos++;\n\nreturn c;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct buffered_con {int dummy; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  bufcon_write (struct buffered_con*,char*,int) ;\n\nint bufcon_putc(struct buffered_con *con, char c)\n{\nchar s[2];\ns[0] = c;\ns[1] = 0;\nbufcon_write(con, s, 1);\nreturn 1;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_putc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strcat (char*,char const*) ;\n\nchar*  bufcon_putc( char *buffer, unsigned char c )\n{\nunsigned char str[2];\n\nstr[0] = c;\nstr[1] = 0;\n\nstrcat( buffer,(const char*)str );\n\nreturn buffer;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint fseek64 (int /*<<< orphan*/ *,long,int) ;\n\nint fseek(FILE *stream, long offset, int whence)\n{\nreturn fseek64(stream, offset, whence);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fseek.c_fseek", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  off_t ;\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint fseeko (int /*<<< orphan*/ *,int /*<<< orphan*/ ,int) ;\n\nint fseek( FILE* stream, long offset, int whence ) {\nreturn fseeko( stream, ( off_t )offset, whence );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static inline int\nbufcon_lenp(int len)\n{\nif (len < 16)\nreturn 1;\nelse if (len < 256)\nreturn 2;\nelse if (len < 4096)\nreturn 3;\nelse if (len < 65536)\nreturn 4;\nelse if (len < 1048576)\nreturn 5;\nelse if (len < 16777216)\nreturn 6;\nelse\nreturn 8;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_lenp", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  bufcon_lenp(unsigned int p)\n{\nif ( p < 0x10 ) return 1;\nif ( p < 0x100 ) return 2;\nif ( p < 0x1000 ) return 3;\nif ( p < 0x10000 ) return 4;\nif ( p < 0x100000 ) return 5;\nif ( p < 0x1000000 ) return 6;\nif ( p < 0x10000000 ) return 7;\n\nreturn 8;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint EBADF ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  fclose (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/ * fdopen_common (int,char const*,int /*<<< orphan*/ ) ;\n\nFILE *\nfdopen(int fd, const char *mode)\n{\nFILE *fp;\n\nif (fd < 0)\n{\nerrno = EBADF;\nreturn NULL;\n}\n\nfp = fdopen_common(fd, mode, 0);\n\nreturn fp;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fdopen.c_fdopen", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint /*<<< orphan*/ * __init_file (int,int /*<<< orphan*/ ,int) ;\nint __parse_mode (char const*) ;\nint /*<<< orphan*/  errno ;\n\nFILE* fdopen( int fd, const char* mode ) {\nint flags;\n\nif ( fd < 0 ) {\nerrno = -EINVAL;\nreturn NULL;\n}\n\nflags = __parse_mode( mode );\n\nreturn __init_file( fd, 0, flags );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; int /*<<< orphan*/  fp; scalar_t__ bufsize; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  F_ERR ;\nint /*<<< orphan*/  F_PERR ;\nscalar_t__ ferror (int /*<<< orphan*/ ) ;\nscalar_t__ fflush (int /*<<< orphan*/ ) ;\nscalar_t__ fwrite (char const*,size_t,size_t,TYPE_1__*) ;\nint /*<<< orphan*/  memcpy (int /*<<< orphan*/ ,char const*,scalar_t__) ;\n\nsize_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)\n{\nsize_t i, n;\n\nif (stream->flags & F_ERR)\nreturn 0;\n\nif (stream->flags & F_PERR)\nstream->flags |= F_ERR;\n\nif (stream->bufsize && !(stream->flags & F_PERR)) {\nif (stream->bufsize < size * nmemb) {\nif (fflush(stream->fp))\nreturn 0;\n\nmemcpy(stream->fp, ptr, stream->bufsize);\nn = stream->bufsize;\n} else {\nn = size * nmemb;\n}\n} else {\nn = fwrite(ptr, size, nmemb, stream->fp);\n}\n\nfor (i = 0; i < n; i++)\nif (fwrite(((char *)ptr) + i, 1, 1, stream->fp))\nreturn n;\n\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fwrite.c_fwrite", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_5__   TYPE_1__ ;\n\n/* Type definitions */\ntypedef  size_t ssize_t ;\nstruct TYPE_5__ {int flags; unsigned long buffer_size; int /*<<< orphan*/  fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_CAN_WRITE ;\nint __FILE_ERROR ;\nint __FILE_NOBUF ;\nscalar_t__ fflush (TYPE_1__*) ;\nscalar_t__ fputc (unsigned char const,TYPE_1__*) ;\nsize_t write (int /*<<< orphan*/ ,void const*,unsigned long) ;\n\nsize_t fwrite( const void* ptr, size_t size, size_t nmemb, FILE* stream ) {\nssize_t res;\nunsigned long len=size * nmemb;\nlong i;\n\nif ( ( stream->flags & __FILE_CAN_WRITE ) == 0 ) {\nstream->flags |= __FILE_ERROR;\nreturn 0;\n}\n\nif ( ( nmemb == 0 ) ||\n( ( len / nmemb ) != size ) ) {\nreturn 0;\n}\n\nif ( ( len > stream->buffer_size ) || ( stream->flags & __FILE_NOBUF ) ) {\nif ( fflush( stream ) ) {\nreturn 0;\n}\n\nres = write( stream->fd, ptr, len );\n} else {\nregister const unsigned char* c = ptr;\n\nfor ( i = len; i > 0; --i, ++c ) {\nif ( fputc( *c, stream ) ) {\nres = len - i;\ngoto abort;\n}\n}\n\nres = len;\n}\n\nif ( res < 0 ) {\nstream->flags |= __FILE_ERROR;\nreturn 0;\n}\n\nabort:\nreturn size ? res / size : 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputc (int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid putchar(int c)\n{\nfputc(c, stdout);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_putchar.c_putchar", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint fputc (int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nint putchar( int c ) {\nreturn fputc( c, stdout );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  lua_State ;\ntypedef  int /*<<< orphan*/  lua_Number ;\n\n/* Variables and functions */\nint /*<<< orphan*/  luaL_error (int /*<<< orphan*/ *,char*) ;\nscalar_t__ lua_isnumber (int /*<<< orphan*/ *,int) ;\nscalar_t__ lua_isstring (int /*<<< orphan*/ *,int) ;\nint /*<<< orphan*/  lua_pushnil (int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  lua_pushvalue (int /*<<< orphan*/ *,int) ;\nint /*<<< orphan*/  lua_remove (int /*<<< orphan*/ *,int) ;\n\n__attribute__((used)) static void remove (lua_State *L, int idx) {\nlua_Number n;\nif (lua_isnumber(L, idx)) {\nn = lua_tonumber(L, idx);\nif (n == (lua_Number)idx) {\nlua_pushvalue(L, idx);\nlua_remove(L, idx);\nreturn;\n}\n}\nluaL_error(L, \"invalid index\");\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_remove.c_remove", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct stat {int /*<<< orphan*/  st_mode; } ;\n\n/* Variables and functions */\nscalar_t__ S_ISDIR (int /*<<< orphan*/ ) ;\nint rmdir (char const*) ;\nscalar_t__ stat (char const*,struct stat*) ;\nint unlink (char const*) ;\n\nint remove( const char* path ) {\nstruct stat st;\n\nif ( stat( path, &st) != 0 ) {\nreturn -1;\n}\n\nif ( S_ISDIR( st.st_mode ) ) {\nreturn rmdir( path );\n} else {\nreturn unlink( path );\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int mode; scalar_t__ eof; char c; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint /*<<< orphan*/  fgetc (TYPE_1__*) ;\nint /*<<< orphan*/  fseek (TYPE_1__*,long,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fsetpos (TYPE_1__*,long*) ;\nint /*<<< orphan*/  fsetpos_end ;\nint /*<<< orphan*/  fsetpos_start ;\nint /*<<< orphan*/  fsetpos_cur ;\n\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\n{\nsize_t i, n;\n\nif (stream->mode & (fsetpos_start | fsetpos_cur | fsetpos_end))\n{\nif (stream->eof)\n{\nstream->mode &= ~(fsetpos_start | fsetpos_cur | fsetpos_end);\nreturn 0;\n}\n\nstream->mode &= ~(fsetpos_start | fsetpos_cur | fsetpos_end);\n*((char *)ptr) = stream->c;\n}\n\nn = size * nmemb;\nif (n == 0)\nreturn 0;\n\nfor (i = 0; i < n; i++)\n{\nif (fgetc(stream) == EOF)\nbreak;\n\n*((char *)ptr + i) = stream->c;\n}\n\nif (stream->mode & fsetpos_cur)\nfsetpos(stream, &stream->pos);\n\nreturn i / size;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fread.c_fread", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_4__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_4__ {int flags; char unget_buffer; scalar_t__ has_ungotten; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint __FILE_CAN_READ ;\nint __FILE_ERROR ;\nint fgetc (TYPE_1__*) ;\n\nsize_t fread( void* ptr, size_t size, size_t nmemb, FILE* stream ) {\nint res;\nunsigned long i, j;\n\nj = size * nmemb;\ni = 0;\n\nif ( ( stream->flags & __FILE_CAN_READ ) == 0 ) {\nstream->flags |= __FILE_ERROR;\nreturn 0;\n}\n\nif ( ( j == 0 ) ||\n( ( j / nmemb ) != size ) ) {\nreturn 0;\n}\n\nif ( stream->has_ungotten ) {\nstream->has_ungotten = 0;\n*( char* )ptr = stream->unget_buffer;\n++i;\n\nif ( j == 1 ) {\nreturn 1;\n}\n}\n\nfor ( ; i < j; ++i ) {\nres = fgetc( stream );\n\nif ( res == EOF ) {\nreturn i / size;\n} else {\n( ( unsigned char* )ptr )[ i ] = ( unsigned char )res;\n}\n}\n\nreturn nmemb;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint _IOREAD ;\nint _IOWRT ;\nint _IOWRTT ;\nint _IOWRTTU ;\nint _IOWRTU ;\nint _IOWRTUF ;\nint _IOWRTUFU ;\nint _IOWRTUFUF ;\nint _IOWRTUFUFU ;\nint _IOWRTUFUFUF ;\nint _IOWRTUFUFUFU ;\nint _IOWRTUFUFUFUF ;\nint _IOWRTUFUFUFUFU ;\nint _IOWRTUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFU ;\nint _IOWRTUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUFUF", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_stdio_internal.c___set_stream_flags", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_4__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_4__ {int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_BUFINPUT ;\nint fflush (TYPE_1__*) ;\n\nint __set_stream_flags( FILE* stream, int new_flags ) {\nif ( ( stream->flags & __FILE_BUFINPUT ) != new_flags) {\nint error;\n\nerror = fflush( stream );\n\nstream->flags = ( stream->flags & ~__FILE_BUFINPUT ) | new_flags;\n\nreturn error;\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  fcntl (int,int,int) ;\nint /*<<< orphan*/  fdopen (int,char*) ;\nint open (char const*,int) ;\n\nFILE *fopen(const char *path, const char *mode)\n{\nint fd = open(path, 0438);\nif (fd < 0)\nreturn NULL;\nif (fcntl(fd, F_SETFD, 1) < 0)\nreturn NULL;\nreturn fdopen(fd, mode);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fopen.c_fopen", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/ * __init_file (int,int,int) ;\nint __parse_mode (char const*) ;\nint open (char const*,int,int) ;\n\nFILE* fopen( const char* path, const char* mode ) {\nint fd;\nint flags;\n\nflags = __parse_mode( mode );\n\nfd = open( path, flags, 0666 );\n\nif ( fd < 0 ) {\nreturn NULL;\n}\n\nreturn __init_file( fd, 1, flags );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  supcon_t ;\n\n/* Variables and functions */\nint supcon_len (int /*<<< orphan*/ *) ;\n\n__attribute__((used)) static inline int supcon_lenx(supcon_t *S) {\nreturn supcon_len(S);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_lenx", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint supcon_lenp (unsigned int) ;\n\nint  supcon_lenx( unsigned int  p )\n{\nreturn (supcon_lenp( p ));\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char*,char*) ;\n\nint puts(char *s)\n{\nprintf(\"puts: %s\\n\",s);\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_puts.c_puts", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char*,char const*) ;\n\nint puts( const char* s ) {\nprintf(\"%s\\n\", s );\n//fflush( stdout );\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  putchar (char) ;\n\nvoid putc(char c)\n{\nputchar(c);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_putc.c__IO_putc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint fputc (int,int /*<<< orphan*/ *) ;\n\nint putc( int c, FILE* stream ) {\nreturn fputc( c, stream );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int /*<<< orphan*/  flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  _IOEOF ;\nint /*<<< orphan*/  _IOERR ;\n\nvoid clearerr(FILE *stream)\n{\nstream->flags &= ~(_IOEOF | _IOERR);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_clearerr.c_clearerr", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_EOF ;\nint __FILE_ERROR ;\n\nvoid clearerr( FILE* stream ) {\nstream->flags &= ~( __FILE_EOF | __FILE_ERROR );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\n__attribute__((used)) static int\nbufcon_lens(const char *s)\n{\nint\t\t\tlen = 0;\n\nwhile (*s)\n{\nlen++;\ns++;\n}\nreturn len;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_lens", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint  bufcon_lens( char *s )\n{\nint i = 0;\nwhile ( s[i] != 0 ) i++;\nreturn i;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int uint64_t ;\ntypedef  int /*<<< orphan*/  BIO ;\n\n/* Variables and functions */\nint /*<<< orphan*/  BIO_putc (int /*<<< orphan*/ *,char) ;\n\nBIO *bufcon_putui(BIO *bio, uint64_t num)\n{\nint i;\nchar c;\n\nfor (i = 1000000000; i > 0; i /= 10) {\nc = (num / i) % 10;\nif (c != 0 || i == 1)\nBIO_putc(bio, c + '0');\n}\nreturn bio;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_bufio.c_bufcon_putui", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  bufcon_putc (char*,unsigned int) ;\n\nchar*  bufcon_putui( char *buffer, unsigned int num )\n{\nunsigned int divisor;\nunsigned int current;\nunsigned int remainder;\nunsigned int found;\n\ncurrent = num;\n\ndivisor = 1000000000;\nfound = 0;\n\nwhile (divisor > 0)\n{\nremainder = current % divisor;\ncurrent = current / divisor;\n\nif ( current != 0 ) found = 1;\nif ( found   != 0 ) bufcon_putc( buffer, current + '0' );\n\ndivisor = divisor / 10;\ncurrent = remainder;\n}\n\nif ( found == 0 ) bufcon_putc( buffer, current + '0' );\n\nreturn buffer;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint _FERR ;\n\nint ferror(FILE *stream)\n{\nreturn stream->flags & _FERR;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_ferror.c_ferror", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint __FILE_ERROR ;\n\nint ferror( FILE* stream ) {\nreturn ( stream->flags & __FILE_ERROR );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; int /*<<< orphan*/  fd; int /*<<< orphan*/  fp; int /*<<< orphan*/  buf; int /*<<< orphan*/  buf_size; int /*<<< orphan*/  buf_ptr; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint F_ERR ;\nint F_PERM ;\nint F_PIPE ;\nint F_WRIT ;\nint /*<<< orphan*/  fflush (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  fputc_unlocked (int,int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  fwrite (int /*<<< orphan*/ *,int,int,int /*<<< orphan*/ ) ;\nscalar_t__ fwrite_unlocked (int /*<<< orphan*/ *,int,int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  memcpy (int /*<<< orphan*/ *,int*,int) ;\nint /*<<< orphan*/  memmove (int /*<<< orphan*/ *,int /*<<< orphan*/ *,int) ;\nscalar_t__ write (int /*<<< orphan*/ ,int*,int) ;\n\nint fputc(int c, FILE *stream)\n{\nif (stream->flags & F_ERR)\nreturn EOF;\n\nif (stream->flags & F_WRIT)\n{\nif (fwrite_unlocked(&c, 1, 1, stream->fp) != 1)\n{\nstream->flags |= F_ERR;\nreturn EOF;\n}\n}\nelse\n{\nif (stream->buf_ptr >= stream->buf_size)\n{\nif (fflush(stream->fp) == EOF)\n{\nstream->flags |= F_ERR;\nreturn EOF;\n}\n}\n\nif (stream->flags & F_PIPE)\n{\nif (write(stream->fd, &c, 1) != 1)\n{\nstream->flags |= F_ERR;\nreturn EOF;\n}\n}\nelse\n{\nmemmove(stream->buf, stream->buf_ptr, stream->buf_ptr);\nmemcpy(stream->buf_ptr, &c, 1);\nstream->buf_ptr++;\n\nif (c == '\\n' && (stream->flags & F_PERM))\n{\nif (fflush(stream->fp) == EOF)\n{\nstream->flags |= F_ERR;\nreturn EOF;\n}\n}\n}\n}\n\nreturn c;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fputc.c_fputc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_5__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_5__ {int flags; int buffer_pos; int buffer_size; int* buffer; int /*<<< orphan*/  fd; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint EOF ;\nint __FILE_BUFLINEWISE ;\nint __FILE_CAN_WRITE ;\nint __FILE_ERROR ;\nint __FILE_NOBUF ;\nscalar_t__ __set_stream_flags (TYPE_1__*,int /*<<< orphan*/ ) ;\nscalar_t__ fflush (TYPE_1__*) ;\nint write (int /*<<< orphan*/ ,int*,int) ;\n\nint fputc( int c, FILE* stream ) {\n/* Check if we can write to the stream */\n\nif ( ( ( stream->flags & __FILE_CAN_WRITE ) == 0 ) ||\n( __set_stream_flags( stream, 0 ) ) ) {\nstream->flags |= __FILE_ERROR;\nreturn EOF;\n}\n\n/* Make sure we have free space in the buffer */\n\nif ( stream->buffer_pos >= stream->buffer_size - 1 ) {\nif ( fflush( stream ) ) {\nstream->flags |= __FILE_ERROR;\nreturn EOF;\n}\n}\n\nif ( stream->flags & __FILE_NOBUF ) {\nif ( write( stream->fd, &c, 1 ) != 1 ) {\nstream->flags |= __FILE_ERROR;\nreturn EOF;\n}\n\nreturn 0;\n}\n\nstream->buffer[ stream->buffer_pos++ ] = c;\n\nif ( ( ( stream->flags & __FILE_BUFLINEWISE ) && ( c == '\\n' ) ) ||\n( stream->flags & __FILE_NOBUF ) ) {\nif ( fflush( stream ) ) {\nstream->flags |= __FILE_ERROR;\nreturn EOF;\n}\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  sprintf (char*,char*) ;\n\nint sprintf_buffer(char *buf, int len)\n{\nint i;\n\nfor (i = 0; i < len; i++)\nsprintf(buf, \"%s\", \"0\");\n\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_pf.c_sprintf_buffer", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  strcat (char*,char*) ;\n\nint sprintf_buffer(char *s, int i)\n{\nint j;\nif ( i <= 0 ) return 0;\nfor ( j = 0; j < i; j++) strcat(s,\" \");\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fprintf (int /*<<< orphan*/ ,char*,...) ;\nint /*<<< orphan*/  stderr ;\nint /*<<< orphan*/  supcon_puts (char*,int /*<<< orphan*/ ) ;\n\nvoid supcon_puti(int i)\n{\nchar buf[128];\nint j;\n\nif (i == 0)\n{\nsupcon_puts(\"0\", stderr);\nreturn;\n}\n\nif (i < 0)\n{\nbuf[0] = '-';\ni = -i;\n}\n\nfor (j = 127; i > 0; j--)\n{\nbuf[j] = '0' + (i % 10);\ni /= 10;\n}\n\nsupcon_puts(buf + j, stderr);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_puti", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char*,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid  supcon_puti( int num )\n{\nint sign;\nint temp;\nchar buffer[ 128 ];\t// You're generous.\nint position = 126;\n\n// Short circuit unnecessary work.\nif ( num == 0 )\n{\nfputs(\"0\",stdout);\nreturn;\n}\n\n\n// Prepare to do work.\nif ( num < 0 )\n{\nsign = 1;\ntemp = -num;\n}\nelse\n{\nsign = 0;\ntemp = num;\n}\n\n\nbuffer[127] = 0;\n\n// Now reduce it.\nwhile ( temp > 0 )\n{\nbuffer[ position-- ] = '0' + (temp % 10);\ntemp = temp / 10;\n}\n\nif ( sign == 1 ) buffer[ position-- ] = '-';\n\n// Now print it.\nfputs(buffer + position + 1 ,stdout);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fgets (char*,int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdin ;\n\nint gets(char *s)\n{\nfgets(s, 512, stdin);\nreturn(1);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_getc.c_gets", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fgets (char*,int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdin ;\n\nint gets(char* buf){\nfgets(buf,512,stdin);\nreturn 1;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char const*,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid supcon_puts(const char *s)\n{\nfputs(s, stdout);\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_support_supcon.c_supcon_puts", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  fputs (char const*,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  stdout ;\n\nvoid supcon_puts( unsigned char *c )\n{\nfputs((const char *)c,stdout);\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  scalar_t__ off_t ;\n\n/* Variables and functions */\nscalar_t__ LONG_MAX ;\nint /*<<< orphan*/  errno ;\nscalar_t__ ftell64 (int /*<<< orphan*/ ) ;\n\noff_t ftell(int fd)\n{\noff_t pos = ftell64(fd);\nif (pos > LONG_MAX)\nerrno = EOVERFLOW;\nreturn pos;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_ftell.c_ftell", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  scalar_t__ off_t ;\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EOVERFLOW ;\nscalar_t__ LONG_MAX ;\nint /*<<< orphan*/  errno ;\nscalar_t__ ftello (int /*<<< orphan*/ *) ;\n\nlong ftell( FILE* stream ) {\noff_t l;\n\nl = ftello( stream );\n\nif ( l > LONG_MAX ) {\nerrno = EOVERFLOW;\nreturn -1;\n}\n\nreturn ( long )l;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ nb_streams; int /*<<< orphan*/  streams; scalar_t__ nb_packets; int /*<<< orphan*/  pkt; } ;\ntypedef  TYPE_1__ AVFormatContext ;\n\n/* Variables and functions */\nint AVFMTCTX_NOHEADER ;\nint /*<<< orphan*/  AV_LOG_ERROR ;\nint /*<<< orphan*/  av_log (int /*<<< orphan*/ *,int /*<<< orphan*/ ,char*,int) ;\nscalar_t__ av_write_frame (int /*<<< orphan*/ ,int /*<<< orphan*/ *) ;\nint /*<<< orphan*/  av_write_trailer (int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  memset (int /*<<< orphan*/ ,int /*<<< orphan*/ ,int) ;\n\nint fflush(AVFormatContext *s)\n{\nint ret = 0;\n\nif (s->flags & AVFMTCTX_NOHEADER)\nreturn 0;\n\nif (s->nb_packets > 0) {\nret = av_write_frame(s->streams[0], &s->pkt);\nif (ret < 0) {\nav_log(NULL, AV_LOG_ERROR, \"Error writing trailer\\n\");\ns->flags |= AVFMTCTX_UNINITIALIZED;\nreturn ret;\n}\n}\n\nav_write_trailer(s->streams[0]);\n\ns->nb_streams = 0;\ns->nb_packets = 0;\nmemset(s->pkt.data, 0, sizeof(s->pkt.data));\n\nreturn ret;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_fflush.c_fflush", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int flags; scalar_t__ buffer_pos; char* buffer; int /*<<< orphan*/  fd; scalar_t__ buffer_data_size; } ;\ntypedef  TYPE_1__ FILE ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SEEK_CUR ;\nint /*<<< orphan*/  _IO_BUFSIZE ;\nint __FILE_BUFINPUT ;\nint __FILE_ERROR ;\nint /*<<< orphan*/  lseek (int /*<<< orphan*/ ,int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  memset (char*,int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\nscalar_t__ strlen (char*) ;\nscalar_t__ write (int /*<<< orphan*/ ,char*,scalar_t__) ;\n\nint fflush( FILE* stream ) {\nif ( stream->flags & __FILE_BUFINPUT ) {\nint tmp;\n\ntmp = ( int )stream->buffer_pos - ( int )stream->buffer_data_size;\n\nif ( tmp != 0 ) {\nlseek( stream->fd, tmp, SEEK_CUR );\n}\n\nstream->buffer_pos = 0;\nstream->buffer_data_size = 0;\n} else {\nif ( stream->buffer_pos > 0 ) {\nif ( write( stream->fd, stream->buffer, stream->buffer_pos ) != stream->buffer_pos ) {\nwrite(0,\"\\nerror file \\n\",strlen(\"\\nerror file \\n\"));\nstream->flags |= __FILE_ERROR;\nreturn -1;\n}\nmemset(stream->buffer,0,_IO_BUFSIZE);\nstream->buffer_pos = 0;\n}\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint getchar () ;\n\nint getc(void)\n{\nreturn getchar();\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/stdio/extr_getc.c__IO_getc", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  FILE ;\n\n/* Variables and functions */\nint fgetc (int /*<<< orphan*/ *) ;\n\nint getc( FILE* stream ) {\nreturn fgetc( stream );\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint EFAULT ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  memset (int /*<<< orphan*/ *,int,int) ;\n\nint sigfillset(sigset_t *set)\n{\nif (set == NULL)\n{\nerrno = EFAULT;\nreturn -1;\n}\n\nmemset(set, 0xff, sizeof(sigset_t));\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigfillset.c_sigfillset", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  memset (void*,int,int) ;\n\nint sigfillset( sigset_t* set ) {\nif ( set == NULL ) {\nerrno = -EINVAL;\nreturn -1;\n}\n\nmemset( ( void* )set, 0xFF, sizeof( sigset_t ) );\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint EINVAL ;\nint NSIG ;\nint errno ;\n\nint sigdelset(sigset_t *set, int signum)\n{\nif (set == NULL || signum <= 0 || signum > NSIG) {\nerrno = EINVAL;\nreturn -1;\n}\n\nset->sig[signum / (sizeof(unsigned long) * 8)] &= ~(1UL << (signum % (sizeof(unsigned long) * 8)));\n\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigdelset.c_sigdelset", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  unsigned long long sigset_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint _NSIG ;\nint /*<<< orphan*/  errno ;\n\nint sigdelset( sigset_t* set, int signum ) {\nif ( ( set == NULL ) ||\n( signum < 1 ) ||\n( signum >= _NSIG ) ) {\nerrno = -EINVAL;\nreturn -1;\n}\n\n*set &= ~( 1ULL << ( signum - 1 ) );\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char*) ;\n\nint raise(int sig)\n{\nprintf(\"raise() not implemented\\n\");\nreturn -1;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_raise.c_raise", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint /*<<< orphan*/  printf (char*) ;\n\nint raise( int signal ) {\nprintf( \"raise(): Not yet implemented!\\n\" );\n\nreturn -1;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint EINVAL ;\nint NSIG ;\nint errno ;\n\nint sigaddset(sigset_t *set, int signum)\n{\nif (set == NULL || signum <= 0 || signum > NSIG) {\nerrno = EINVAL;\nreturn -1;\n}\n\nset->sig[signum - 1] = 1;\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigaddset.c_sigaddset", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  unsigned long long sigset_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint _NSIG ;\nint /*<<< orphan*/  errno ;\n\nint sigaddset( sigset_t* set, int signum ) {\nif ( ( set == NULL ) ||\n( signum < 1 ) ||\n( signum >= _NSIG ) ) {\nerrno = -EINVAL;\nreturn -1;\n}\n\n*set |= ( 1ULL << ( signum - 1 ) );\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint EINVAL ;\nint /*<<< orphan*/  errno ;\n\nint sigemptyset(sigset_t *set)\n{\nif (set == NULL) {\nerrno = EINVAL;\nreturn -1;\n}\n\n*set = 0;\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigemptyset.c_sigemptyset", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  scalar_t__ sigset_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint /*<<< orphan*/  errno ;\n\nint sigemptyset( sigset_t* set ) {\nif ( set == NULL ) {\nerrno = -EINVAL;\nreturn -1;\n}\n\n*set = 0;\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nint errno ;\nint /*<<< orphan*/  killpg (int,int) ;\n\nint kill(int pid, int sig) {\nif (killpg(pid, sig) < 0) {\nerrno = -errno;\nreturn -1;\n}\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_kill.c_kill", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  pid_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SYS_kill ;\nint errno ;\nint syscall2 (int /*<<< orphan*/ ,int /*<<< orphan*/ ,int) ;\n\nint kill( pid_t pid, int signal ) {\nint error;\n\nerror = syscall2(\nSYS_kill,\npid,\nsignal\n);\n\nif ( error < 0 ) {\nerrno = -error;\nreturn -1;\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint EINVAL ;\nint errno ;\nint /*<<< orphan*/  sigemptyset (int /*<<< orphan*/ *) ;\n\nint sigismember(const sigset_t *set, int sig)\n{\nif (!set || sig <= 0 || sig > NSIG) {\nsigemptyset(set);\nreturn -1;\n}\nreturn (1 & (set->__val[sig-1 >> 5]) >> (sig-1 & 31));\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigismember.c_sigismember", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  unsigned long long sigset_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint _NSIG ;\nint /*<<< orphan*/  errno ;\n\nint sigismember( const sigset_t* set, int signum ) {\nif ( ( set == NULL ) ||\n( signum < 1 ) ||\n( signum >= _NSIG ) ) {\nerrno = -EINVAL;\nreturn -1;\n}\n\nif ( ( ( *set ) & ( 1ULL << ( signum - 1 ) ) ) != 0 ) {\nreturn 1;\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint errno ;\nint /*<<< orphan*/  syscall (int /*<<< orphan*/ ,int,int /*<<< orphan*/ *,int /*<<< orphan*/ *) ;\n\nint sigprocmask(int how, const sigset_t *set, sigset_t *oldset) {\nint ret = syscall(0x80, how, set, oldset);\nif (ret < 0) {\nerrno = -ret;\nreturn -1;\n}\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigprocmask.c_sigprocmask", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigset_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SYS_sigprocmask ;\nint errno ;\nint syscall3 (int /*<<< orphan*/ ,int,int,int) ;\n\nint sigprocmask( int how, const sigset_t* set, sigset_t* oldset ) {\nint error;\n\nerror = syscall3(\nSYS_sigprocmask,\nhow,\n( int )set,\n( int )oldset\n);\n\nif ( error < 0 ) {\nerrno = -error;\nreturn -1;\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  ksigaction ;\ntypedef  int /*<<< orphan*/  ksigset_t ;\ntypedef  int /*<<< orphan*/  ksiginfo_t ;\ntypedef  int /*<<< orphan*/  ksigset_t_t ;\ntypedef  int /*<<< orphan*/  ksigaction_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SIG_DFL ;\nint /*<<< orphan*/  SIG_ERR ;\nint /*<<< orphan*/  SIG_IGN ;\nint /*<<< orphan*/  SIG_SETMASK ;\nint /*<<< orphan*/  SIG_SETMASK_ ;\nint /*<<< orphan*/  SIG_SETMASK_t ;\nint /*<<< orphan*/  SIG_SETMASK_u ;\nint /*<<< orphan*/  SIG_SETMASK_v ;\nint /*<<< orphan*/  SIG_SETMASK_w ;\nint /*<<< orphan*/  SIG_SETMASK_x ;\nint /*<<< orphan*/  SIG_SETMASK_y ;\nint /*<<< orphan*/  SIG_SETMASK_z ;\nint /*<<< orphan*/  SIG_SETMASK_zz ;\nint /*<<< orphan*/  SIG_SETMASK_zzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;\nint /*<<< orphan*/  SIG_SETMASK_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_signal.c_signal", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct sigaction {scalar_t__ sa_handler; int /*<<< orphan*/  sa_flags; int /*<<< orphan*/  sa_mask; } ;\ntypedef  scalar_t__ sighandler_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  EINVAL ;\nint /*<<< orphan*/  SA_RESTART ;\nscalar_t__ SIG_ERR ;\nint _NSIG ;\nint /*<<< orphan*/  errno ;\nscalar_t__ sigaction (int,struct sigaction*,struct sigaction*) ;\nint sigaddset (int /*<<< orphan*/ *,int) ;\nint sigemptyset (int /*<<< orphan*/ *) ;\n\nsighandler_t signal( int signum, sighandler_t handler ) {\nint error;\nstruct sigaction act;\nstruct sigaction oldact;\n\nif ( ( handler == SIG_ERR ) ||\n( signum < 0 ) ||\n( signum >= _NSIG ) ) {\nerrno = -EINVAL;\nreturn SIG_ERR;\n}\n\nact.sa_handler = handler;\n\nerror = sigemptyset( &act.sa_mask );\n\nif ( error < 0 ) {\nreturn SIG_ERR;\n}\n\nerror = sigaddset( &act.sa_mask, signum );\n\nif ( error < 0 ) {\nreturn SIG_ERR;\n}\n\nact.sa_flags = SA_RESTART;\n\nif ( sigaction( signum, &act, &oldact ) < 0 ) {\nreturn SIG_ERR;\n}\n\nreturn oldact.sa_handler;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\ntypedef  int /*<<< orphan*/  sigaction_t ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SIG_ERR ;\nint errno ;\nint /*<<< orphan*/  signal (int,int /*<<< orphan*/ ) ;\nint /*<<< orphan*/  sigaction (int,int /*<<< orphan*/ *,int /*<<< orphan*/ *) ;\n\nint sigaction(int sig, sigaction_t *act, sigaction_t *oact) {\nint ret = sigaction(sig, act, oact);\nif (ret < 0) {\nerrno = -ret;\nreturn -1;\n}\nreturn 0;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_sigaction.c_sigaction", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\nstruct sigaction {int dummy; } ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SYS_sigaction ;\nint errno ;\nint syscall3 (int /*<<< orphan*/ ,int,int,int) ;\n\nint sigaction( int signum, const struct sigaction* act, struct sigaction* oldact ) {\nint error;\n\nerror = syscall3(\nSYS_sigaction,\nsignum,\n( int )act,\n( int )oldact\n);\n\nif ( error < 0 ) {\nerrno = -error;\nreturn -1;\n}\n\nreturn 0;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint killpg(int pid, int sig)\n{\nreturn -1;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/signal/extr_killpg.c_killpg", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\n\nint killpg( int pgrp, int signal ) {\nreturn -1;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int /*<<< orphan*/  handle; } ;\ntypedef  TYPE_1__ DIR ;\n\n/* Variables and functions */\nint /*<<< orphan*/  errno ;\nint /*<<< orphan*/  _wrewinddir (int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\n\nint rewinddir(DIR *dir)\n{\nint ret = _wrewinddir(0, dir->handle);\nif (ret < 0)\nerrno = -ret;\nreturn ret;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/extr_rewinddir.c_rewinddir", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int /*<<< orphan*/  fd; } ;\ntypedef  TYPE_1__ DIR ;\n\n/* Variables and functions */\nint /*<<< orphan*/  SYS_rewinddir ;\nint errno ;\nint syscall1 (int /*<<< orphan*/ ,int /*<<< orphan*/ ) ;\n\nvoid rewinddir( DIR* dirp ) {\nint error;\n\nerror = syscall1( SYS_rewinddir, dirp->fd );\n\nif ( error < 0 ) {\nerrno = -error;\n}\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct TYPE_3__ {int /*<<< orphan*/  dir; int /*<<< orphan*/  buf; } ;\ntypedef  TYPE_1__ DIR ;\n\n/* Variables and functions */\nint /*<<< orphan*/  readdir_r (int /*<<< orphan*/ ,TYPE_1__*,int /*<<< orphan*/ *) ;\n\nDIR *readdir(DIR *dir)\n{\nif (!dir)\nreturn NULL;\n\nif (!readdir_r(dir->dir, dir, &dir->buf))\nreturn dir;\n\nreturn NULL;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/extr_readdir.c_readdir", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\ntypedef  struct TYPE_3__   TYPE_1__ ;\n\n/* Type definitions */\nstruct dirent {int dummy; } ;\nstruct TYPE_3__ {struct dirent entry; int /*<<< orphan*/  fd; } ;\ntypedef  TYPE_1__ DIR ;\n\n/* Variables and functions */\nint getdents (int /*<<< orphan*/ ,struct dirent*,int) ;\n\nstruct dirent* readdir( DIR* dir ) {\nint error;\n\nif ( dir == NULL ) {\nreturn NULL;\n}\n\nerror = getdents( dir->fd, &dir->entry, sizeof( struct dirent ) );\n\nif ( error == 0 ) {\nreturn NULL;\n}\n\nreturn &dir->entry;\n}"}, {"instruction": "decompile x86 assembly to C.", "predict": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nscalar_t__ isdigit (char) ;\nscalar_t__ isxdigit (char) ;\n\nunsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)\n{\nunsigned long result = 0,value;\n\nif (!base) {\nbase = 10;\nif (*cp == '0') {\nbase = 8;\nif ((cp[1] == 'x') && isxdigit(cp[2])) {\nbase = 16;\ncp += 2;\n}\n}\n}\nwhile (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)\n? toupper(*cp) : *cp)-'A'+10) < base) {\nresult = result*base+value;\ncp++;\n}\nif (endp)\n*endp = (char *)cp;\nreturn result;\n}</s><s>", "file:": "./How-to-Make-a-Computer-Operating-System/src/sdk/src/libc/src/extr_sscanf.c_simple_strtoul", "output": "#define NULL ((void*)0)\ntypedef unsigned long size_t;  // Customize by platform.\ntypedef long intptr_t; typedef unsigned long uintptr_t;\ntypedef long scalar_t__;  // Either arithmetic or pointer type.\n/* By default, we understand bool (as a convenience). */\ntypedef int bool;\n#define false 0\n#define true 1\n\n/* Forward declarations */\n\n/* Type definitions */\n\n/* Variables and functions */\nscalar_t__ isdigit (char const) ;\nscalar_t__ isxdigit (char const) ;\nchar toupper (char const) ;\n\nunsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)\n{\nunsigned long result = 0,value;\n\nif (!base) {\nbase = 10;\nif (*cp == '0') {\nbase = 8;\ncp++;\nif ((*cp == 'x') && isxdigit(cp[1])) {\ncp++;\nbase = 16;\n}\n}\n}\nwhile (isxdigit(*cp) &&\n(value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {\nresult = result*base + value;\ncp++;\n}\nif (endp)\n*endp = (char *)cp;\nreturn result;\n}"}]